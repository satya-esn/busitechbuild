{"version":3,"sources":["node_modules/@angular/cdk/esm2015/accordion.js","node_modules/@angular/material/esm2015/expansion.js","node_modules/@angular/material/esm2015/snack-bar.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,kBAAA,EAAA,YAAA;AAAA,aAAA,gBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,cAAA,EAAA,YAAA;AAAA,aAAA,YAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,oBAAA,EAAA,YAAA;AAAA,aAAA,kBAAA;AAAA,KAAA;AAAA;;;AAAA,QAAA,kDAAA,GAAA,mBAAA;AAAA;AAAA,qDAAA,CAAA;AAAA;;;AAAA,QAAA,0CAAA,GAAA,mBAAA;AAAA;AAAA,mDAAA,CAAA;AAAA;;;AAAA,QAAA,iCAAA,GAAA,mBAAA;AAAA;AAAA,2CAAA,CAAA;AAAA;;;AAAA,QAAA,qDAAA,GAAA,mBAAA;AAAA;AAAA,wDAAA,CAAA;AAAA;;;;;;;;AAYA;;;;;AAIA;;;;;;AAIA,QAAA,MAAA,GAAA,CAAA;AACA;;;;QAGA,Y;AACA,8BAAA;AAAA;;AACA;;;AAGA,aAAA,aAAA,GAAA,IAAiC,iCAAA,CAAA,SAAA,CAAjC,EAAA;AACA;;;;AAGA,aAAA,oBAAA,GAAA,IAAwC,iCAAA,CAAA,SAAA,CAAxC,EAAA;AACA;;;;AAGA,aAAA,EAAA,2BAAmC,MAAA,EAAnC;AACA,aAAA,MAAA,GAAA,KAAA;AACA;AACA;;;;;;;;;AAUA;;;;kCAIA;AACA,eAAA,aAAA,CAAA,IAAA;AACA;AACA;;;;;;;mCAIA;AACA,eAAA,aAAA,CAAA,KAAA;AACA;AACA;;;;;;;oCAIA,O,EAAA;AACA,eAAA,aAAA,CAAA,IAAA,CAAA,OAAA;AACA;AACA;;;;;;sCAGA;AACA,eAAA,aAAA,CAAA,QAAA;AACA;AACA;;;;;;;;sCAKA,Q,EAAA;AACA,cAAA,KAAA,KAAA,EAAA;AACA,iBAAA,oBAAA,CAAA,IAAA,CAAA,QAAA;AACA;AACA;;;4BA1CA;AAAiB,iBAAA,KAAA,MAAA;AAAoB;AACrC;;;;;0BAIA,K,EAAA;AAAsB,eAAA,MAAA,GAAe,MAAA,CAAA,kDAAA,CAAA,uBAAA,CAAA,CAAA,CAAqB,KAArB,CAAf;AAA4C;;;;;;AAuClE,IAAA,YAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AACrB,QAAA,QAAA,EAAA,+BADqB;AAErB,QAAA,QAAA,EAAA;AAFqB,OAAA;AAArB,KADA,CAAA;AAMA,IAAA,YAAA,CAAA,cAAA,GAAA;AACA,MAAA,KAAA,EAAA,CAAA;AAAa,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAApB,OAAA;AADA,KAAA;AAIA;;;;;AAIA;;;;;AAIA,QAAA,QAAA,GAAA,CAAA;AACA,QAAA,EAAA,GAAA,SAAA;AACA;;;;;QAIA,gB;AACA;;;;;AAKA,gCAAA,SAAA,EAAA,kBAAA,EAAA,oBAAA,EAAA;AAAA;;AAAA;;AACA,aAAA,SAAA,GAAA,SAAA;AACA,aAAA,kBAAA,GAAA,kBAAA;AACA,aAAA,oBAAA,GAAA,oBAAA;AACA;;;;AAGA,aAAA,yBAAA,GAAyC,iCAAA,CAAA,cAAA,CAAA,CAAY,KAArD;AACA;;;;AAGA,aAAA,MAAA,GAAA,IAA0B,0CAAA,CAAA,cAAA,CAA1B,EAAA;AACA;;;;AAGA,aAAA,MAAA,GAAA,IAA0B,0CAAA,CAAA,cAAA,CAA1B,EAAA;AACA;;;;AAGA,aAAA,SAAA,GAAA,IAA6B,0CAAA,CAAA,cAAA,CAA7B,EAAA;AACA;;;;;;AAKA,aAAA,cAAA,GAAA,IAAkC,0CAAA,CAAA,cAAA,CAAlC,EAAA;AACA;;;;AAGA,aAAA,EAAA,iCAAyC,QAAA,EAAzC;AACA,aAAA,SAAA,GAAA,KAAA;AACA,aAAA,SAAA,GAAA,KAAA;AACA;;;;AAGA,aAAA,8BAAA;AAAA;;;AAGA,oBAAA,CAAiB,CAHjB;;AAIA,aAAA,8BAAA,GACA,oBAAA,CAAA,MAAA;AAAA;;;;;AAKA,kBAAA,EAAA,EAAA,WAAA,EAAA;AACA,cAAA,KAAA,CAAA,SAAA,IAAA,CAAA,KAAA,CAAA,SAAA,CAAA,KAAA,IACA,KAAA,CAAA,SAAA,CAAA,EAAA,KAAA,WADA,IACA,KAAA,CAAA,EAAA,KAAA,EADA,EACA;AACA,YAAA,KAAA,CAAA,QAAA,GAAA,KAAA;AACA;AACa,SAVb,CADA,CAvCA,CAmDA;;AACA,YAAA,KAAA,SAAA,EAAA;AACA,eAAA,yBAAA,GAAA,KAAA,+BAAA,EAAA;AACA;AACA;AACA;;;;;;;;;AA2CA;;;;sCAIA;AACA,eAAA,MAAA,CAAA,QAAA;AACA,eAAA,MAAA,CAAA,QAAA;AACA,eAAA,SAAA,CAAA,IAAA;AACA,eAAA,SAAA,CAAA,QAAA;;AACA,eAAA,8BAAA;;AACA,eAAA,yBAAA,CAAA,WAAA;AACA;AACA;;;;;;;iCAIA;AACA,cAAA,CAAA,KAAA,QAAA,EAAA;AACA,iBAAA,QAAA,GAAA,CAAA,KAAA,QAAA;AACA;AACA;AACA;;;;;;;gCAIA;AACA,cAAA,CAAA,KAAA,QAAA,EAAA;AACA,iBAAA,QAAA,GAAA,KAAA;AACA;AACA;AACA;;;;;;;+BAIA;AACA,cAAA,CAAA,KAAA,QAAA,EAAA;AACA,iBAAA,QAAA,GAAA,IAAA;AACA;AACA;AACA;;;;;;;0DAIA;AAAA;;AACA,iBAAA,KAAA,SAAA,CAAA,oBAAA,CAAA,SAAA;AAAA;;;;AAIA,oBAAA,QAAA,EAAA;AACA;AACA,gBAAA,CAAA,MAAA,CAAA,QAAA,EAAA;AACA,cAAA,MAAA,CAAA,QAAA,GAAA,QAAA;AACA;AACS,WATT,CAAA;AAUA;;;4BA7FA;AAAoB,iBAAA,KAAA,SAAA;AAAuB;AAC3C;;;;;0BAIA,Q,EAAA;AACA,UAAA,QAAA,GAAmB,MAAA,CAAA,kDAAA,CAAA,uBAAA,CAAA,CAAA,CAAqB,QAArB,CAAnB,CADA,CAEA;;AACA,cAAA,KAAA,SAAA,KAAA,QAAA,EAAA;AACA,iBAAA,SAAA,GAAA,QAAA;AACA,iBAAA,cAAA,CAAA,IAAA,CAAA,QAAA;;AACA,gBAAA,QAAA,EAAA;AACA,mBAAA,MAAA,CAAA,IAAA;AACA;;;;;;AAKA,kBAAA,WAAA,GAAA,KAAA,SAAA,GAAA,KAAA,SAAA,CAAA,EAAA,GAAA,KAAA,EAAA;;AACA,mBAAA,oBAAA,CAAA,MAAA,CAAA,KAAA,EAAA,EAAA,WAAA;AACA,aATA,MAUA;AACA,mBAAA,MAAA,CAAA,IAAA;AACA,aAfA,CAgBA;AACA;;;AACA,iBAAA,kBAAA,CAAA,YAAA;AACA;AACA;AACA;;;;;;;4BAIA;AAAoB,iBAAA,KAAA,SAAA;AAAuB;AAC3C;;;;;0BAIA,Q,EAAA;AAA4B,eAAA,SAAA,GAAkB,MAAA,CAAA,kDAAA,CAAA,uBAAA,CAAA,CAAA,CAAqB,QAArB,CAAlB;AAAkD;;;;;;AAyD9E,IAAA,gBAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AACrB,QAAA,QAAA,EAAA,wCADqB;AAErB,QAAA,QAAA,EAAA,kBAFqB;AAGrB,QAAA,SAAA,EAAA,CACA;AACA;AACA;AAAqB,UAAA,OAAA,EAAA,YAArB;AAAqB,UAAA,QAAA,EAAA;AAArB,SAHA;AAHqB,OAAA;AAArB,KADA,CAAA;AAWA;;AACA,IAAA,gBAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAA,YAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAmC,UAAA,IAAA,EAAO,0CAAA,CAAA,UAAA;AAA1C,SAAA,EAAoD;AAAG,UAAA,IAAA,EAAO,0CAAA,CAAA,UAAA;AAAV,SAApD;AAAL,OADA,EAEA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,mBAAA;AAAZ,OAFA,EAGA;AAAK,QAAA,IAAA,EAAO,qDAAA,CAAA,2BAAA;AAAZ,OAHA,CAAA;AAAA,KAAA;;AAKA,IAAA,gBAAA,CAAA,cAAA,GAAA;AACA,MAAA,MAAA,EAAA,CAAA;AAAc,QAAA,IAAA,EAAO,0CAAA,CAAA,QAAA;AAArB,OAAA,CADA;AAEA,MAAA,MAAA,EAAA,CAAA;AAAc,QAAA,IAAA,EAAO,0CAAA,CAAA,QAAA;AAArB,OAAA,CAFA;AAGA,MAAA,SAAA,EAAA,CAAA;AAAiB,QAAA,IAAA,EAAO,0CAAA,CAAA,QAAA;AAAxB,OAAA,CAHA;AAIA,MAAA,cAAA,EAAA,CAAA;AAAsB,QAAA,IAAA,EAAO,0CAAA,CAAA,QAAA;AAA7B,OAAA,CAJA;AAKA,MAAA,QAAA,EAAA,CAAA;AAAgB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAAvB,OAAA,CALA;AAMA,MAAA,QAAA,EAAA,CAAA;AAAgB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAAvB,OAAA;AANA,KAAA;AASA;;;;;QAIA,kB;;;;AAEA,IAAA,kBAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,UAAA,CAAZ;AAAoB,MAAA,IAAA,EAAA,CAAA;AACpB,QAAA,OAAA,EAAA,CAAA,YAAA,EAAA,gBAAA,CADoB;AAEpB,QAAA,YAAA,EAAA,CAAA,YAAA,EAAA,gBAAA;AAFoB,OAAA;AAApB,KADA,CAAA;AAOA;;;;;AAKA;;;;AAMA;;;;;;;;;;;;;;;;;ACnUA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,oBAAA,EAAA,YAAA;AAAA,aAAA,kBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,cAAA,EAAA,YAAA;AAAA,aAAA,YAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,eAAA,EAAA,YAAA;AAAA,aAAA,aAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,qCAAA,EAAA,YAAA;AAAA,aAAA,mCAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,mBAAA,EAAA,YAAA;AAAA,aAAA,iBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,4BAAA,EAAA,YAAA;AAAA,aAAA,0BAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,yBAAA,EAAA,YAAA;AAAA,aAAA,uBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,8BAAA,EAAA,YAAA;AAAA,aAAA,4BAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,wBAAA,EAAA,YAAA;AAAA,aAAA,sBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,0BAAA,EAAA,YAAA;AAAA,aAAA,wBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,kCAAA,EAAA,YAAA;AAAA,aAAA,gCAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,wBAAA,EAAA,YAAA;AAAA,aAAA,sBAAA;AAAA,KAAA;AAAA;;;AAAA,QAAA,0CAAA,GAAA,mBAAA;AAAA;AAAA,mDAAA,CAAA;AAAA;;;AAAA,QAAA,gDAAA,GAAA,mBAAA;AAAA;AAAA,+DAAA,CAAA;AAAA;;;AAAA,QAAA,mDAAA,GAAA,mBAAA;AAAA;AAAA,sDAAA,CAAA;AAAA;;;AAAA,QAAA,kDAAA,GAAA,mBAAA;AAAA;AAAA,qDAAA,CAAA;AAAA;;;AAAA,QAAA,qDAAA,GAAA,mBAAA;AAAA;AAAA,wDAAA,CAAA;AAAA;;;AAAA,QAAA,gDAAA,GAAA,mBAAA;AAAA;AAAA,mDAAA,CAAA;AAAA;;;AAAA,QAAA,4CAAA,GAAA,mBAAA;AAAA;AAAA,uDAAA,CAAA;AAAA;;;AAAA,QAAA,iEAAA,GAAA,mBAAA;AAAA;AAAA,qEAAA,CAAA;AAAA;;;AAAA,QAAA,iCAAA,GAAA,mBAAA;AAAA;AAAA,2CAAA,CAAA;AAAA;;;AAAA,QAAA,2CAAA,GAAA,mBAAA;AAAA;AAAA,qDAAA,CAAA;AAAA;;;AAAA,QAAA,+CAAA,GAAA,mBAAA;AAAA;AAAA,iDAAA,CAAA;AAAA;;;AAAA,QAAA,mDAAA,GAAA,mBAAA;AAAA;AAAA,qDAAA,CAAA;AAAA;;;;;;;;AAoBA;;;;;AAIA;;;;;;;AAKA,QAAA,aAAA,GAAA,IAA0B,0CAAA,CAAA,gBAAA,CAA1B,CAAwC,eAAxC,CAAA;AAEA;;;;;AAIA;;;;;AAIA,QAAA,gCAAA,GAAA,mCAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,QAAA,sBAAA,GAAA;AACA;;;AAGA,MAAA,eAAA,EAAqB,MAAA,CAAA,gDAAA,CAAA,SAAA,CAAA,CAAA,CAAO,iBAAP,EAAO,CACpB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK,iBAAL,EAAyB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK;AAAE,QAAA,SAAA,EAAA;AAAF,OAAL,CAAzB,CADoB,EAEpB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK,UAAL,EAAkB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK;AAAE,QAAA,SAAA,EAAA;AAAF,OAAL,CAAlB,CAFoB,EAGpB,MAAA,CAAA,gDAAA,CAAA,YAAA,CAAA,CAAA,CAAU,2CAAV,EAAwD,MAAA,CAAA,gDAAA,CAAA,SAAA,CAAA,CAAA,CAAO,gCAAP,CAAxD,CAHoB,CAAP,CAJrB;;AASA;;;AAGA,MAAA,qBAAA,EAA2B,MAAA,CAAA,gDAAA,CAAA,SAAA,CAAA,CAAA,CAAO,iBAAP,EAAO,CAC1B,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK,iBAAL,EAAyB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK;AACtC,QAAA,MAAA,EAAA;AADsC,OAAL,CAAzB,EAEC;AACT,QAAA,MAAA,EAAA;AAAqB,UAAA,eAAA,EAAA;AAArB;AADS,OAFD,CAD0B,EAM1B,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK,UAAL,EAAkB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK;AAC/B,QAAA,MAAA,EAAA;AAD+B,OAAL,CAAlB,EAEC;AACT,QAAA,MAAA,EAAA;AAAqB,UAAA,cAAA,EAAA;AAArB;AADS,OAFD,CAN0B,EAW1B,MAAA,CAAA,gDAAA,CAAA,YAAA,CAAA,CAAA,CAAU,2CAAV,EAAwD,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK,CACzD,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK,kBAAL,EAA0B,MAAA,CAAA,gDAAA,CAAA,cAAA,CAAA,CAAA,EAA1B,EAAsC;AAAK,QAAA,QAAA,EAAA;AAAL,OAAtC,CADyD,EAEzD,MAAA,CAAA,gDAAA,CAAA,SAAA,CAAA,CAAA,CAAO,gCAAP,CAFyD,CAAL,CAAxD,CAX0B,CAAP,CAZ3B;;AA4BA;;;AAGA,MAAA,aAAA,EAAmB,MAAA,CAAA,gDAAA,CAAA,SAAA,CAAA,CAAA,CAAO,eAAP,EAAO,CAClB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK,iBAAL,EAAyB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK;AAAE,QAAA,MAAA,EAAA,KAAF;AAAE,QAAA,UAAA,EAAA;AAAF,OAAL,CAAzB,CADkB,EAElB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK,UAAL,EAAkB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK;AAAE,QAAA,MAAA,EAAA,GAAF;AAAE,QAAA,UAAA,EAAA;AAAF,OAAL,CAAlB,CAFkB,EAGlB,MAAA,CAAA,gDAAA,CAAA,YAAA,CAAA,CAAA,CAAU,2CAAV,EAAwD,MAAA,CAAA,gDAAA,CAAA,SAAA,CAAA,CAAA,CAAO,gCAAP,CAAxD,CAHkB,CAAP;AA/BnB,KAAA;AAsCA;;;;;AAIA;;;;;QAIA,wB;AACA;;;AAGA,sCAAA,SAAA,EAAA;AAAA;;AACA,WAAA,SAAA,GAAA,SAAA;AACA,K;;AAEA,IAAA,wBAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AACrB,QAAA,QAAA,EAAA;AADqB,OAAA;AAArB,KADA,CAAA;AAKA;;AACA,IAAA,wBAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,aAAA;AAAZ,OADA,CAAA;AAAA,KAAA;AAIA;;;;;AAIA;;;;;;AAIA,QAAA,QAAA,GAAA,CAAA;AACA;;;;;;AAKA,QAAA,mCAAA,GAAA,IAAgD,0CAAA,CAAA,gBAAA,CAAhD,CAA8D,qCAA9D,CAAA;AACA,QAAA,EAAA,GAAA,SAAA;AACA;;;;;;;QAMA,iB;;;;;AACA;;;;;;;;;AASA,iCAAA,SAAA,EAAA,kBAAA,EAAA,0BAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,cAAA,EAAA,cAAA,EAAA;AAAA;;AAAA;;AACA,mCAAA,SAAA,EAAA,kBAAA,EAAA,0BAAA;AACA,eAAA,iBAAA,GAAA,iBAAA;AACA,eAAA,cAAA,GAAA,cAAA;AACA,eAAA,WAAA,GAAA,KAAA;AACA;;;;AAGA,eAAA,WAAA,GAAA,IAA+B,0CAAA,CAAA,cAAA,CAA/B,EAAA;AACA;;;;AAGA,eAAA,aAAA,GAAA,IAAiC,0CAAA,CAAA,cAAA,CAAjC,EAAA;AACA;;;;AAGA,eAAA,aAAA,GAAA,IAAiC,iCAAA,CAAA,SAAA,CAAjC,EAAA;AACA;;;;AAGA,eAAA,SAAA,wCAAuD,QAAA,EAAvD;AACA;;;;AAGA,eAAA,kBAAA,GAAA,IAAsC,iCAAA,CAAA,SAAA,CAAtC,EAAA;AACA,eAAA,SAAA,GAAA,SAAA;AACA,eAAA,SAAA,GAAA,SAAA,CA1BA,CA2BA;AACA;;AACA,eAAA,kBAAA,CAAA,IAAA,CAAqC,MAAA,CAAA,2CAAA,CAAA,sBAAA,CAAA,CAAA;AAAoB;;;;;AAKzD,kBAAA,CAAA,EAAA,CAAA,EAAA;AACA,iBAAA,CAAA,CAAA,SAAA,KAAA,CAAA,CAAA,SAAA,IAAA,CAAA,CAAA,OAAA,KAAA,CAAA,CAAA,OAAA;AACS,SAP4B,CAArC,EAOS,SAPT;AAOS;;;;AAIT,kBAAA,KAAA,EAAA;AACA,cAAA,KAAA,CAAA,SAAA,KAAA,MAAA,EAAA;AACA,gBAAA,KAAA,CAAA,OAAA,KAAA,UAAA,EAAA;AACA,qBAAA,WAAA,CAAA,IAAA;AACA,aAFA,MAGA,IAAA,KAAA,CAAA,OAAA,KAAA,WAAA,EAAA;AACA,qBAAA,aAAA,CAAA,IAAA;AACA;AACA;AACS,SApBT;;AAqBA,YAAA,cAAA,EAAA;AACA,iBAAA,UAAA,GAAA,cAAA,CAAA,UAAA;AACA;;AApDA;AAqDA;AACA;;;;;;;;;AA4BA;;;;sCAIA;AACA,cAAA,KAAA,SAAA,EAAA;AACA;AACA;AACA;AACA,mBAAA,CAAA,KAAA,QAAA,GAAA,KAAA,SAAA,CAAA,WAAA,GAAA,KAAA,iBAAA,EAAA,MAAA,SAAA;AACA;;AACA,iBAAA,KAAA;AACA;AACA;;;;;;;4CAIA;AACA,iBAAA,KAAA,QAAA,GAAA,UAAA,GAAA,WAAA;AACA;AACA;;;;;;6CAGA;AAAA;;AACA,cAAA,KAAA,YAAA,EAAA;AACA;AACA,iBAAA,MAAA,CAAA,IAAA,CAA6B,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAA;AAAS;AAAe,gBAAxB,CAA7B,EAAmE,MAAA,CAAA,2CAAA,CAAA,QAAA,CAAA,CAAA;AAAM;;;AAGzE;AAAA,qBAAA,MAAA,CAAA,QAAA,IAAA,CAAA,MAAA,CAAA,OAAA;AAAA,aAHmE,CAAnE,EAGoD,MAAA,CAAA,2CAAA,CAAA,MAAA,CAAA,CAAA,CAAI,CAAJ,CAHpD,EAGwD,SAHxD;AAGwD;;;AAGxD,wBAAA;AACA,cAAA,MAAA,CAAA,OAAA,GAAA,IAAmC,gDAAA,CAAA,gBAAA,CAAnC,CAAiD,MAAA,CAAA,YAAA,CAAA,SAAjD,EAAiD,MAAA,CAAA,iBAAjD,CAAA;AACa,aARb;AASA;AACA;AACA;;;;;;;oCAIA,O,EAAA;AACA,eAAA,aAAA,CAAA,IAAA,CAAA,OAAA;AACA;AACA;;;;;;sCAGA;AACA;;AACA,eAAA,kBAAA,CAAA,QAAA;;AACA,eAAA,aAAA,CAAA,QAAA;AACA;AACA;;;;;;;yCAIA;AACA,cAAA,KAAA,KAAA,EAAA;AACA;AACA,gBAAA,cAAA,GAAA,KAAA,SAAA,CAAA,aAAA;AACA;;AACA,gBAAA,WAAA,GAAA,KAAA,KAAA,CAAA,aAAA;AACA,mBAAA,cAAA,KAAA,WAAA,IAAA,WAAA,CAAA,QAAA,CAAA,cAAA,CAAA;AACA;;AACA,iBAAA,KAAA;AACA;;;4BAzFA;AACA,iBAAA,KAAA,WAAA,IAAA,KAAA,SAAA,IAAA,KAAA,SAAA,CAAA,UAAA;AACA;AACA;;;;;0BAIA,K,EAAA;AACA,eAAA,WAAA,GAA2B,MAAA,CAAA,kDAAA,CAAA,uBAAA,CAAA,CAAA,CAAqB,KAArB,CAA3B;AACA;AACA;;;;;;;4BAIA;AACA,iBAAA,KAAA,eAAA,IAAA,KAAA,SAAA,IAAA,KAAA,SAAA,CAAA,cAAA;AACA;AACA;;;;;0BAIA,K,EAAA;AACA,eAAA,eAAA,GAAA,KAAA;AACA;;;;MA3FgC,mDAAA,CAAA,kBAAA,C;;AA+JhC,IAAA,iBAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AAAU,QAAA,MAAA,EAAA,CAAA,s+CAAA,CAAV;AACrB,QAAA,QAAA,EAAA,qBADqB;AAErB,QAAA,QAAA,EAAA,mBAFqB;AAGrB,QAAA,QAAA,EAAA,+cAHqB;AAIrB,QAAA,aAAA,EAA+B,0CAAA,CAAA,mBAAA,CAAA,CAAiB,IAJ3B;AAKrB,QAAA,eAAA,EAAiC,0CAAA,CAAA,yBAAA,CAAA,CAAuB,MALnC;AAMrB,QAAA,MAAA,EAAA,CAAA,UAAA,EAAA,UAAA,CANqB;AAOrB,QAAA,OAAA,EAAA,CAAA,QAAA,EAAA,QAAA,EAAA,gBAAA,CAPqB;AAQrB,QAAA,UAAA,EAAA,CAAA,sBAAA,CAAA,aAAA,CARqB;AASrB,QAAA,SAAA,EAAA,CACA;AACA;AACA;AAAqB,UAAA,OAAA,EAAA,aAArB;AAAqB,UAAA,QAAA,EAAA;AAArB,SAHA,CATqB;AAcrB,QAAA,IAAA,EAAA;AACA,mBAAA,qBADA;AAEA,kCAAA,UAFA;AAGA,6CAAA,qCAHA;AAIA,iDAAA;AAJA;AAdqB,OAAA;AAArB,KADA,CAAA;AAuBA;;AACA,IAAA,iBAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAA,SAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAgC,UAAA,IAAA,EAAO,0CAAA,CAAA,UAAA;AAAvC,SAAA,EAAiD;AAAG,UAAA,IAAA,EAAO,0CAAA,CAAA,UAAA;AAAV,SAAjD,EAAqE;AAAG,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAV;AAAgB,UAAA,IAAA,EAAA,CAAA,aAAA;AAAhB,SAArE;AAAL,OADA,EAEA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,mBAAA;AAAZ,OAFA,EAGA;AAAK,QAAA,IAAA,EAAO,qDAAA,CAAA,2BAAA;AAAZ,OAHA,EAIA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,kBAAA;AAAZ,OAJA,EAKA;AAAK,QAAA,IAAA,EAAA,SAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAgC,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAvC;AAA6C,UAAA,IAAA,EAAA,CAAS,4CAAA,CAAA,UAAA,CAAT;AAA7C,SAAA;AAAL,OALA,EAMA;AAAK,QAAA,IAAA,EAAA,MAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAA6B,UAAA,IAAA,EAAO,0CAAA,CAAA,UAAA;AAApC,SAAA,EAA8C;AAAG,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAV;AAAgB,UAAA,IAAA,EAAA,CAAS,iEAAA,CAAA,uBAAA,CAAT;AAAhB,SAA9C;AAAL,OANA,EAOA;AAAK,QAAA,IAAA,EAAA,SAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAgC,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAvC;AAA6C,UAAA,IAAA,EAAA,CAAA,mCAAA;AAA7C,SAAA,EAA6F;AAAG,UAAA,IAAA,EAAO,0CAAA,CAAA,UAAA;AAAV,SAA7F;AAAL,OAPA,CAAA;AAAA,KAAA;;AASA,IAAA,iBAAA,CAAA,cAAA,GAAA;AACA,MAAA,UAAA,EAAA,CAAA;AAAkB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAAzB,OAAA,CADA;AAEA,MAAA,cAAA,EAAA,CAAA;AAAsB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAA7B,OAAA,CAFA;AAGA,MAAA,WAAA,EAAA,CAAA;AAAmB,QAAA,IAAA,EAAO,0CAAA,CAAA,QAAA;AAA1B,OAAA,CAHA;AAIA,MAAA,aAAA,EAAA,CAAA;AAAqB,QAAA,IAAA,EAAO,0CAAA,CAAA,QAAA;AAA5B,OAAA,CAJA;AAKA,MAAA,YAAA,EAAA,CAAA;AAAoB,QAAA,IAAA,EAAO,0CAAA,CAAA,cAAA,CAA3B;AAAuC,QAAA,IAAA,EAAA,CAAA,wBAAA,EAAA;AAAoC,UAAA,MAAA,EAAA;AAApC,SAAA;AAAvC,OAAA,CALA;AAMA,MAAA,KAAA,EAAA,CAAA;AAAa,QAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAApB;AAA6B,QAAA,IAAA,EAAA,CAAA,MAAA,EAAA;AAAkB,UAAA,MAAA,EAAA;AAAlB,SAAA;AAA7B,OAAA;AANA,KAAA;;QAQA,0B;;;;AAEA,IAAA,0BAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AACrB,QAAA,QAAA,EAAA,gBADqB;AAErB,QAAA,IAAA,EAAA;AACA,UAAA,KAAA,EAAA;AADA;AAFqB,OAAA;AAArB,KADA,CAAA;AASA;;;;;AAIA;;;;;;QAKA,uB;AACA;;;;;;;AAOA,uCAAA,KAAA,EAAA,QAAA,EAAA,aAAA,EAAA,kBAAA,EAAA,cAAA,EAAA;AAAA;;AAAA;;AACA,aAAA,KAAA,GAAA,KAAA;AACA,aAAA,QAAA,GAAA,QAAA;AACA,aAAA,aAAA,GAAA,aAAA;AACA,aAAA,kBAAA,GAAA,kBAAA;AACA,aAAA,yBAAA,GAAyC,iCAAA,CAAA,cAAA,CAAA,CAAY,KAArD;AACA;;;;AAGA,aAAA,mBAAA,GAAA,IAAA;AACA;;AACA,YAAA,yBAAA,GAAA,KAAA,CAAA,SAAA,GACA,KAAA,CAAA,SAAA,CAAA,aAAA,CAAA,IAAA,CAA+C,MAAA,CAAA,2CAAA,CAAA,QAAA,CAAA,CAAA;AAAM;;;;AAIrD,kBAAA,OAAA;AAAA,iBAAA,CAAA,EAAA,OAAA,CAAA,YAAA,CAAA,IAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;AAAA,SAJ+C,CAA/C,CADA,GAMY,iCAAA,CAAA,OAAA,CANZ,CAXA,CAkBA;AACA;;AACA,aAAA,yBAAA,GACY,MAAA,CAAA,iCAAA,CAAA,OAAA,CAAA,CAAA,CAAK,KAAA,CAAA,MAAL,EAAK,KAAA,CAAA,MAAL,EAAK,yBAAL,EAAK,KAAA,CAAA,aAAA,CAAA,IAAA,CAAiF,MAAA,CAAA,2CAAA,CAAA,QAAA,CAAA,CAAA;AAAM;;;;AAIxG,kBAAA,OAAA,EAAA;AACA,iBAAA,CAAA,EAAA,OAAA,CAAA,YAAA,CAAA,IACA,OAAA,CAAA,UAAA,CADA,IAEA,OAAA,CAAA,gBAAA,CAFA,CAAA;AAGa,SARqF,CAAjF,CAAL,EASZ,SATY;AASZ;;;AAGA;AAAA,iBAAA,MAAA,CAAA,kBAAA,CAAA,YAAA,EAAA;AAAA,SAZY,CADZ,CApBA,CAkCA;;AACA,QAAA,KAAA,CAAA,MAAA,CACA,IADA,CACkB,MAAA,CAAA,2CAAA,CAAA,QAAA,CAAA,CAAA;AAAM;;;AAGxB;AAAA,iBAAA,KAAA,CAAA,cAAA,EAAA;AAAA,SAHkB,CADlB,EAKA,SALA;AAKA;;;AAGA;AAAA,iBAAA,aAAA,CAAA,QAAA,CAAA,QAAA,EAAA,SAAA,CAAA;AAAA,SARA;;AASA,QAAA,aAAA,CAAA,OAAA,CAAA,QAAA,EAAA,SAAA;AAAA;;;;AAIA,kBAAA,MAAA,EAAA;AACA,cAAA,MAAA,IAAA,KAAA,CAAA,SAAA,EAAA;AACA,YAAA,KAAA,CAAA,SAAA,CAAA,kBAAA,CAAA,MAAA;AACA;AACS,SART;;AASA,YAAA,cAAA,EAAA;AACA,eAAA,cAAA,GAAA,cAAA,CAAA,cAAA;AACA,eAAA,eAAA,GAAA,cAAA,CAAA,eAAA;AACA;AACA;AACA;;;;;;;4CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAA,mBAAA,GAAA,KAAA;AACA;AACA;;;;;;;;;AAQA;;;;kCAIA;AACA,eAAA,KAAA,CAAA,MAAA;AACA;AACA;;;;;;;sCAIA;AACA,iBAAA,KAAA,KAAA,CAAA,QAAA;AACA;AACA;;;;;;;4CAIA;AACA,iBAAA,KAAA,KAAA,CAAA,iBAAA,EAAA;AACA;AACA;;;;;;;sCAIA;AACA,iBAAA,KAAA,KAAA,CAAA,EAAA;AACA;AACA;;;;;;;6CAIA;AACA,iBAAA,KAAA,KAAA,CAAA,cAAA;AACA;AACA;;;;;;;sCAIA;AACA,iBAAA,CAAA,KAAA,KAAA,CAAA,UAAA,IAAA,CAAA,KAAA,KAAA,CAAA,QAAA;AACA;AACA;;;;;;;;iCAKA,K,EAAA;AACA,kBAAA,KAAA,CAAA,OAAA;AACA;AACA,iBAAiB,mDAAA,CAAA,OAAA,CAAjB;AACA,iBAAiB,mDAAA,CAAA,OAAA,CAAjB;AACA,kBAAA,CAAqB,MAAA,CAAA,mDAAA,CAAA,gBAAA,CAAA,CAAA,CAAc,KAAd,CAArB,EAAmC;AACnC,gBAAA,KAAA,CAAA,cAAA;;AACA,qBAAA,OAAA;AACA;;AACA;;AACA;AACA,kBAAA,KAAA,KAAA,CAAA,SAAA,EAAA;AACA,qBAAA,KAAA,CAAA,SAAA,CAAA,oBAAA,CAAA,KAAA;AACA;;AACA;AAbA;AAeA;AACA;;;;;;;;;gCAMA;AAAA,cAAA,MAAA,uEAAA,SAAA;;AACA,eAAA,aAAA,CAAA,QAAA,CAAA,KAAA,QAAA,EAAA,MAAA;AACA;AACA;;;;;;sCAGA;AACA,eAAA,yBAAA,CAAA,WAAA;;AACA,eAAA,aAAA,CAAA,cAAA,CAAA,KAAA,QAAA;AACA;;;4BAlFA;AACA,iBAAA,KAAA,KAAA,CAAA,QAAA;AACA;;;;;;AAkFA,IAAA,uBAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AAAU,QAAA,QAAA,EAAA,4BAAV;AACrB,QAAA,MAAA,EAAA,CAAA,4sCAAA,CADqB;AAErB,QAAA,QAAA,EAAA,8RAFqB;AAGrB,QAAA,aAAA,EAA+B,0CAAA,CAAA,mBAAA,CAAA,CAAiB,IAH3B;AAIrB,QAAA,eAAA,EAAiC,0CAAA,CAAA,yBAAA,CAAA,CAAuB,MAJnC;AAKrB,QAAA,UAAA,EAAA,CACA,sBAAA,CAAA,eADA,EAEA,sBAAA,CAAA,qBAFA,CALqB;AASrB,QAAA,IAAA,EAAA;AACA,mBAAA,4BADA;AAEA,kBAAA,QAFA;AAGA,uBAAA,iBAHA;AAIA,6BAAA,mBAJA;AAKA,kCAAA,eALA;AAMA,kCAAA,eANA;AAOA,kCAAA,gBAPA;AAQA,kCAAA,eARA;AASA,4FATA;AAUA,8FAVA;AAWA,qBAAA,WAXA;AAYA,uBAAA,kBAZA;AAaA,0BAAA,qBAbA;AAcA,sCAAA,qBAdA;AAeA;AAfA;AATqB,OAAA;AAArB,KADA,CAAA;AAmCA;;AACA,IAAA,uBAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAA,iBAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAwC,UAAA,IAAA,EAAO,0CAAA,CAAA,MAAA;AAA/C,SAAA;AAAL,OADA,EAEA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,YAAA;AAAZ,OAFA,EAGA;AAAK,QAAA,IAAA,EAAO,+CAAA,CAAA,cAAA;AAAZ,OAHA,EAIA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,mBAAA;AAAZ,OAJA,EAKA;AAAK,QAAA,IAAA,EAAA,SAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAgC,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAvC;AAA6C,UAAA,IAAA,EAAA,CAAA,mCAAA;AAA7C,SAAA,EAA6F;AAAG,UAAA,IAAA,EAAO,0CAAA,CAAA,UAAA;AAAV,SAA7F;AAAL,OALA,CAAA;AAAA,KAAA;;AAOA,IAAA,uBAAA,CAAA,cAAA,GAAA;AACA,MAAA,cAAA,EAAA,CAAA;AAAsB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAA7B,OAAA,CADA;AAEA,MAAA,eAAA,EAAA,CAAA;AAAuB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAA9B,OAAA;AAFA,KAAA;AAIA;;;;;;QAKA,4B;;;;AAEA,IAAA,4BAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AACrB,QAAA,QAAA,EAAA,uBADqB;AAErB,QAAA,IAAA,EAAA;AACA,UAAA,KAAA,EAAA;AADA;AAFqB,OAAA;AAArB,KADA,CAAA;AAQA;;;;;;QAKA,sB;;;;AAEA,IAAA,sBAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AACrB,QAAA,QAAA,EAAA,iBADqB;AAErB,QAAA,IAAA,EAAA;AACA,UAAA,KAAA,EAAA;AADA;AAFqB,OAAA;AAArB,KADA,CAAA;AASA;;;;;AAIA;;;;QAGA,Y;;;;;AACA,8BAAA;AAAA;;AAAA;;AACA,qCAAA,SAAA;AACA,eAAA,WAAA,GAAA,KAAA;AACA;;;;;;;;;AAQA,eAAA,WAAA,GAAA,SAAA;AACA;;;;AAGA,eAAA,cAAA,GAAA,OAAA;AAfA;AAgBA;AACA;;;;;;;;;AAUA;;;6CAGA;AACA,eAAA,WAAA,GAAA,IAA+B,+CAAA,CAAA,iBAAA,CAA/B,CAA8C,KAAA,QAA9C,EAA8C,QAA9C,EAAA;AACA;AACA;;;;;;;;6CAKA,K,EAAA;AAAA,cACe,OADf,GACyB,KADzB,CACe,OADf;AAEA;;AACA,cAAA,OAAA,GAAA,KAAA,WAAA;;AACA,cAAA,OAAA,KAAwB,mDAAA,CAAA,MAAA,CAAxB,EAA4B;AAC5B,gBAAA,CAAiB,MAAA,CAAA,mDAAA,CAAA,gBAAA,CAAA,CAAA,CAAc,KAAd,CAAjB,EAA+B;AAC/B,cAAA,OAAA,CAAA,kBAAA;AACA,cAAA,KAAA,CAAA,cAAA;AACA;AACA,WALA,MAMA,IAAA,OAAA,KAA6B,mDAAA,CAAA,KAAA,CAA7B,EAAgC;AAChC,gBAAA,CAAiB,MAAA,CAAA,mDAAA,CAAA,gBAAA,CAAA,CAAA,CAAc,KAAd,CAAjB,EAA+B;AAC/B,cAAA,OAAA,CAAA,iBAAA;AACA,cAAA,KAAA,CAAA,cAAA;AACA;AACA,WALA,MAMA;AACA,iBAAA,WAAA,CAAA,SAAA,CAAA,KAAA;AACA;AACA;AACA;;;;;;;2CAIA,M,EAAA;AACA,eAAA,WAAA,CAAA,gBAAA,CAAA,MAAA;AACA;;;4BA3CA;AAAsB,iBAAA,KAAA,WAAA;AAAyB;AAC/C;;;;;0BAIA,I,EAAA;AAA0B,eAAA,WAAA,GAAoB,MAAA,CAAA,kDAAA,CAAA,uBAAA,CAAA,CAAA,CAAqB,IAArB,CAApB;AAAgD;;;;MA3B/C,mDAAA,CAAA,cAAA,C;;AAmE3B,IAAA,YAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AACrB,QAAA,QAAA,EAAA,eADqB;AAErB,QAAA,QAAA,EAAA,cAFqB;AAGrB,QAAA,MAAA,EAAA,CAAA,OAAA,CAHqB;AAIrB,QAAA,SAAA,EAAA,CAAA;AACA,UAAA,OAAA,EAAA,aADA;AAEA,UAAA,WAAA,EAAA;AAFA,SAAA,CAJqB;AAQrB,QAAA,IAAA,EAAA;AACA,UAAA,KAAA,EAAA;AADA;AARqB,OAAA;AAArB,KADA,CAAA;AAcA,IAAA,YAAA,CAAA,cAAA,GAAA;AACA,MAAA,QAAA,EAAA,CAAA;AAAgB,QAAA,IAAA,EAAO,0CAAA,CAAA,iBAAA,CAAvB;AAAsC,QAAA,IAAA,EAAA,CAAA,uBAAA,EAAA;AAAmC,UAAA,WAAA,EAAA;AAAnC,SAAA;AAAtC,OAAA,CADA;AAEA,MAAA,UAAA,EAAA,CAAA;AAAkB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAAzB,OAAA,CAFA;AAGA,MAAA,WAAA,EAAA,CAAA;AAAmB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAA1B,OAAA,CAHA;AAIA,MAAA,cAAA,EAAA,CAAA;AAAsB,QAAA,IAAA,EAAO,0CAAA,CAAA,OAAA;AAA7B,OAAA;AAJA,KAAA;AAOA;;;;;QAIA,kB;;;;AAEA,IAAA,kBAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,UAAA,CAAZ;AAAoB,MAAA,IAAA,EAAA,CAAA;AACpB,QAAA,OAAA,EAAA,CAA0B,4CAAA,CAAA,cAAA,CAA1B,EAAwC,mDAAA,CAAA,oBAAA,CAAxC,EAA4D,gDAAA,CAAA,cAAA,CAA5D,CADoB;AAEpB,QAAA,OAAA,EAAA,CACA,YADA,EAEA,iBAFA,EAGA,0BAHA,EAIA,uBAJA,EAKA,sBALA,EAMA,4BANA,EAOA,wBAPA,CAFoB;AAWpB,QAAA,YAAA,EAAA,CACA,YADA,EAEA,iBAFA,EAGA,0BAHA,EAIA,uBAJA,EAKA,sBALA,EAMA,4BANA,EAOA,wBAPA;AAXoB,OAAA;AAApB,KADA,CAAA;AAwBA;;;;;AAKA;;;;AAMA;;;;;;;;;;;;;;;;;AChvBA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,mBAAA,EAAA,YAAA;AAAA,aAAA,iBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,uCAAA,EAAA,YAAA;AAAA,aAAA,qCAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,+BAAA,EAAA,YAAA;AAAA,aAAA,6BAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,aAAA,EAAA,YAAA;AAAA,aAAA,WAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,sBAAA,EAAA,YAAA;AAAA,aAAA,oBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,oBAAA,EAAA,YAAA;AAAA,aAAA,kBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,mBAAA,EAAA,YAAA;AAAA,aAAA,iBAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,gBAAA,EAAA,YAAA;AAAA,aAAA,cAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,gBAAA,EAAA,YAAA;AAAA,aAAA,cAAA;AAAA,KAAA;AAAA;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA,EAAA,uBAAA,EAAA,YAAA;AAAA,aAAA,qBAAA;AAAA,KAAA;AAAA;;;AAAA,QAAA,iCAAA,GAAA,mBAAA;AAAA;AAAA,2CAAA,CAAA;AAAA;;;AAAA,QAAA,0CAAA,GAAA,mBAAA;AAAA;AAAA,mDAAA,CAAA;AAAA;;;AAAA,QAAA,gDAAA,GAAA,mBAAA;AAAA;AAAA,+DAAA,CAAA;AAAA;;;AAAA,QAAA,gDAAA,GAAA,mBAAA;AAAA;AAAA,mDAAA,CAAA;AAAA;;;AAAA,QAAA,2CAAA,GAAA,mBAAA;AAAA;AAAA,qDAAA,CAAA;AAAA;;;AAAA,QAAA,iDAAA,GAAA,mBAAA;AAAA;AAAA,oDAAA,CAAA;AAAA;;;AAAA,QAAA,4CAAA,GAAA,mBAAA;AAAA;AAAA,uDAAA,CAAA;AAAA;;;AAAA,QAAA,mDAAA,GAAA,mBAAA;AAAA;AAAA,sDAAA,CAAA;AAAA;;;AAAA,QAAA,qDAAA,GAAA,mBAAA;AAAA;AAAA,wDAAA,CAAA;AAAA;;;AAAA,QAAA,8CAAA,GAAA,mBAAA;AAAA;AAAA,iDAAA,CAAA;AAAA;;;AAAA,QAAA,iDAAA,GAAA,mBAAA;AAAA;AAAA,mDAAA,CAAA;AAAA;;;;;;;;AAmBA;;;;;AAIA;;;;;;QAIA,c;AACA;;;;AAIA,8BAAA,iBAAA,EAAA,WAAA,EAAA;AAAA;;AAAA;;AACA,aAAA,WAAA,GAAA,WAAA;AACA;;;;AAGA,aAAA,eAAA,GAAA,IAAmC,iCAAA,CAAA,SAAA,CAAnC,EAAA;AACA;;;;AAGA,aAAA,YAAA,GAAA,IAAgC,iCAAA,CAAA,SAAA,CAAhC,EAAA;AACA;;;;AAGA,aAAA,SAAA,GAAA,IAA6B,iCAAA,CAAA,SAAA,CAA7B,EAAA;AACA;;;;AAGA,aAAA,kBAAA,GAAA,KAAA;AACA,aAAA,iBAAA,GAAA,iBAAA,CAlBA,CAmBA;;AACA,aAAA,QAAA,GAAA,SAAA;AAAA;;;AAGA;AAAA,iBAAA,MAAA,CAAA,OAAA,EAAA;AAAA,SAHA;;AAIA,QAAA,iBAAA,CAAA,OAAA,CAAA,SAAA;AAAA;;;AAGA;AAAA,iBAAA,MAAA,CAAA,cAAA,EAAA;AAAA,SAHA;AAIA;AACA;;;;;;;;kCAIA;AACA,cAAA,CAAA,KAAA,eAAA,CAAA,MAAA,EAAA;AACA,iBAAA,iBAAA,CAAA,IAAA;AACA;;AACA,UAAA,YAAA,CAAA,KAAA,kBAAA,CAAA;AACA;AACA;;;;;;;4CAIA;AACA,cAAA,CAAA,KAAA,SAAA,CAAA,MAAA,EAAA;AACA,iBAAA,kBAAA,GAAA,IAAA;;AACA,iBAAA,SAAA,CAAA,IAAA;;AACA,iBAAA,SAAA,CAAA,QAAA;AACA;AACA;AACA;;;;;;;;;0CAMA;AACA,eAAA,iBAAA;AACA;AACA;;;;;;;;sCAKA,Q,EAAA;AAAA;;AACA,eAAA,kBAAA,GAAA,UAAA;AAAA;;;AAGA;AAAA,mBAAA,MAAA,CAAA,OAAA,EAAA;AAAA,WAHA,EAGA,QAHA,CAAA;AAIA;AACA;;;;;;;gCAIA;AACA,cAAA,CAAA,KAAA,YAAA,CAAA,MAAA,EAAA;AACA,iBAAA,YAAA,CAAA,IAAA;;AACA,iBAAA,YAAA,CAAA,QAAA;AACA;AACA;AACA;;;;;;;;yCAKA;AACA,eAAA,WAAA,CAAA,OAAA;;AACA,cAAA,CAAA,KAAA,SAAA,CAAA,MAAA,EAAA;AACA,iBAAA,SAAA,CAAA,QAAA;AACA;;AACA,eAAA,eAAA,CAAA,IAAA,CAAA;AAAmC,YAAA,iBAAA,EAAA,KAAA;AAAnC,WAAA;;AACA,eAAA,eAAA,CAAA,QAAA;;AACA,eAAA,kBAAA,GAAA,KAAA;AACA;AACA;;;;;;;yCAIA;AACA,iBAAA,KAAA,eAAA,CAAA,YAAA,EAAA;AACA;AACA;;;;;;;sCAIA;AACA,iBAAA,KAAA,iBAAA,CAAA,QAAA;AACA;AACA;;;;;;;mCAIA;AACA,iBAAA,KAAA,SAAA,CAAA,YAAA,EAAA;AACA;;;;;AAGA;;;;;AAIA;;;;;;AAIA,QAAA,kBAAA,GAAA,IAA+B,0CAAA,CAAA,gBAAA,CAA/B,CAA6C,iBAA7C,CAAA;AACA;;;;;QAIA,iB,GACA,6BAAA;AAAA;;AACA;;;AAGA,WAAA,UAAA,GAAA,WAAA;AACA;;;;;AAIA,WAAA,mBAAA,GAAA,EAAA;AACA;;;;AAGA,WAAA,QAAA,GAAA,CAAA;AACA;;;;AAGA,WAAA,IAAA,GAAA,IAAA;AACA;;;;AAGA,WAAA,kBAAA,GAAA,QAAA;AACA;;;;AAGA,WAAA,gBAAA,GAAA,QAAA;AACA,K;AAGA;;;;;AAIA;;;;;;QAIA,c;AACA;;;;AAIA,8BAAA,WAAA,EAAA,IAAA,EAAA;AAAA;;AACA,aAAA,WAAA,GAAA,WAAA;AACA,aAAA,IAAA,GAAA,IAAA;AACA;AACA;;;;;;;;iCAIA;AACA,eAAA,WAAA,CAAA,iBAAA;AACA;AACA;;;;;;;4BAIA;AACA,iBAAA,CAAA,CAAA,KAAA,IAAA,CAAA,MAAA;AACA;;;;;;AAEA,IAAA,cAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AAAU,QAAA,QAAA,EAAA,kBAAV;AACrB,QAAA,QAAA,EAAA,mKADqB;AAErB,QAAA,MAAA,EAAA,CAAA,uUAAA,CAFqB;AAGrB,QAAA,aAAA,EAA+B,0CAAA,CAAA,mBAAA,CAAA,CAAiB,IAH3B;AAIrB,QAAA,eAAA,EAAiC,0CAAA,CAAA,yBAAA,CAAA,CAAuB,MAJnC;AAKrB,QAAA,IAAA,EAAA;AACA,mBAAA;AADA;AALqB,OAAA;AAArB,KADA,CAAA;AAWA;;AACA,IAAA,cAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAA;AAAL,OADA,EAEA;AAAK,QAAA,IAAA,EAAA,SAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAgC,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAAvC;AAA6C,UAAA,IAAA,EAAA,CAAA,kBAAA;AAA7C,SAAA;AAAL,OAFA,CAAA;AAAA,KAAA;AAKA;;;;;AAIA;;;;;;;AAKA,QAAA,qBAAA,GAAA;AACA;;;AAGA,MAAA,aAAA,EAAmB,MAAA,CAAA,gDAAA,CAAA,SAAA,CAAA,CAAA,CAAO,OAAP,EAAO,CAClB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK,cAAL,EAAsB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK;AACnC,QAAA,SAAA,EAAA,YADmC;AAEnC,QAAA,OAAA,EAAA;AAFmC,OAAL,CAAtB,CADkB,EAKlB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK,SAAL,EAAiB,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK;AAC9B,QAAA,SAAA,EAAA,UAD8B;AAE9B,QAAA,OAAA,EAAA;AAF8B,OAAL,CAAjB,CALkB,EASlB,MAAA,CAAA,gDAAA,CAAA,YAAA,CAAA,CAAA,CAAU,cAAV,EAA2B,MAAA,CAAA,gDAAA,CAAA,SAAA,CAAA,CAAA,CAAO,kCAAP,CAA3B,CATkB,EAUlB,MAAA,CAAA,gDAAA,CAAA,YAAA,CAAA,CAAA,CAAU,wBAAV,EAAqC,MAAA,CAAA,gDAAA,CAAA,SAAA,CAAA,CAAA,CAAO,mCAAP,EAA6C,MAAA,CAAA,gDAAA,CAAA,OAAA,CAAA,CAAA,CAAK;AAC/F,QAAA,OAAA,EAAA;AAD+F,OAAL,CAA7C,CAArC,CAVkB,CAAP;AAJnB,KAAA;AAoBA;;;;;AAIA;;;;;QAIA,oB;;;;;AACA;;;;;;AAMA,oCAAA,OAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,cAAA,EAAA;AAAA;;AAAA;;AACA;AACA,eAAA,OAAA,GAAA,OAAA;AACA,eAAA,WAAA,GAAA,WAAA;AACA,eAAA,kBAAA,GAAA,kBAAA;AACA,eAAA,cAAA,GAAA,cAAA;AACA;;;;AAGA,eAAA,UAAA,GAAA,KAAA;AACA;;;;AAGA,eAAA,OAAA,GAAA,IAA2B,iCAAA,CAAA,SAAA,CAA3B,EAAA;AACA;;;;AAGA,eAAA,QAAA,GAAA,IAA4B,iCAAA,CAAA,SAAA,CAA5B,EAAA;AACA;;;;AAGA,eAAA,eAAA,GAAA,MAAA,CArBA,CAsBA;AACA;;AACA,YAAA,cAAA,CAAA,UAAA,KAAA,WAAA,IAAA,CAAA,cAAA,CAAA,mBAAA,EAAA;AACA,iBAAA,KAAA,GAAA,OAAA;AACA,SAFA,MAGA,IAAA,cAAA,CAAA,UAAA,KAAA,KAAA,EAAA;AACA,iBAAA,KAAA,GAAA,IAAA;AACA,SAFA,MAGA;AACA,iBAAA,KAAA,GAAA,QAAA;AACA;;AAhCA;AAiCA;AACA;;;;;;;;;;8CAMA,M,EAAA;AACA,eAAA,kBAAA;;AACA,eAAA,qBAAA;;AACA,iBAAA,KAAA,aAAA,CAAA,qBAAA,CAAA,MAAA,CAAA;AACA;AACA;;;;;;;;;6CAMA,M,EAAA;AACA,eAAA,kBAAA;;AACA,eAAA,qBAAA;;AACA,iBAAA,KAAA,aAAA,CAAA,oBAAA,CAAA,MAAA,CAAA;AACA;AACA;;;;;;;;uCAKA,K,EAAA;AAAA,cACe,SADf,GACoC,KADpC,CACe,SADf;AAAA,cACe,OADf,GACoC,KADpC,CACe,OADf;;AAEA,cAAA,OAAA,KAAA,MAAA,IAAA,SAAA,KAAA,MAAA,IAAA,OAAA,KAAA,QAAA,EAAA;AACA,iBAAA,aAAA;AACA;;AACA,cAAA,OAAA,KAAA,SAAA,EAAA;AACA;AACA;;AACA;AACA,gBAAA,OAAA,GAAA,KAAA,QAAA;;AACA,iBAAA,OAAA,CAAA,GAAA;AAAA;;;AAGA,wBAAA;AACA,cAAA,OAAA,CAAA,IAAA;AACA,cAAA,OAAA,CAAA,QAAA;AACa,aANb;AAOA;AACA;AACA;;;;;;;gCAIA;AACA,cAAA,CAAA,KAAA,UAAA,EAAA;AACA,iBAAA,eAAA,GAAA,SAAA;;AACA,iBAAA,kBAAA,CAAA,aAAA;AACA;AACA;AACA;;;;;;;+BAIA;AACA;AACA;AACA;AACA,eAAA,eAAA,GAAA,QAAA;AACA,iBAAA,KAAA,OAAA;AACA;AACA;;;;;;;sCAIA;AACA,eAAA,UAAA,GAAA,IAAA;;AACA,eAAA,aAAA;AACA;AACA;;;;;;;;;wCAMA;AAAA;;AACA,eAAA,OAAA,CAAA,gBAAA,CAAA,YAAA,GAAA,IAAA,CAA0D,MAAA,CAAA,2CAAA,CAAA,MAAA,CAAA,CAAA,CAAI,CAAJ,CAA1D,EAA8D,SAA9D;AAA8D;;;AAG9D,sBAAA;AACA,YAAA,OAAA,CAAA,OAAA,CAAA,IAAA;;AACA,YAAA,OAAA,CAAA,OAAA,CAAA,QAAA;AACS,WANT;AAOA;AACA;;;;;;;;gDAKA;AACA;AACA,cAAA,OAAA,GAAA,KAAA,WAAA,CAAA,aAAA;AACA;;AACA,cAAA,YAAA,GAAA,KAAA,cAAA,CAAA,UAAA;;AACA,cAAA,YAAA,EAAA;AACA,gBAAA,KAAA,CAAA,OAAA,CAAA,YAAA,CAAA,EAAA;AACA;AACA,cAAA,YAAA,CAAA,OAAA;AAAA;;;;AAIA,wBAAA,QAAA;AAAA,uBAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,QAAA,CAAA;AAAA,eAJA;AAKA,aAPA,MAQA;AACA,cAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,YAAA;AACA;AACA;;AACA,cAAA,KAAA,cAAA,CAAA,kBAAA,KAAA,QAAA,EAAA;AACA,YAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,sBAAA;AACA;;AACA,cAAA,KAAA,cAAA,CAAA,gBAAA,KAAA,KAAA,EAAA;AACA,YAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,mBAAA;AACA;AACA;AACA;;;;;;;;6CAKA;AACA,cAAA,KAAA,aAAA,CAAA,WAAA,EAAA,EAAA;AACA,kBAAA,KAAA,CAAA,0EAAA,CAAA;AACA;AACA;;;;MA1KmC,gDAAA,CAAA,kBAAA,C;;AA4KnC,IAAA,oBAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAAZ;AAAqB,MAAA,IAAA,EAAA,CAAA;AAAU,QAAA,QAAA,EAAA,qBAAV;AACrB,QAAA,QAAA,EAAA,6CADqB;AAErB,QAAA,MAAA,EAAA,CAAA,sYAAA,CAFqB;AAGrB;AACA;AACA;AACA;AACA,QAAA,eAAA,EAAiC,0CAAA,CAAA,yBAAA,CAAA,CAAuB,OAPnC;AAQrB,QAAA,aAAA,EAA+B,0CAAA,CAAA,mBAAA,CAAA,CAAiB,IAR3B;AASrB,QAAA,UAAA,EAAA,CAAA,qBAAA,CAAA,aAAA,CATqB;AAUrB,QAAA,IAAA,EAAA;AACA,yBAAA,OADA;AAEA,mBAAA,yBAFA;AAGA,sBAAA,iBAHA;AAIA,2BAAA;AAJA;AAVqB,OAAA;AAArB,KADA,CAAA;AAmBA;;AACA,IAAA,oBAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,QAAA;AAAZ,OADA,EAEA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,YAAA;AAAZ,OAFA,EAGA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,mBAAA;AAAZ,OAHA,EAIA;AAAK,QAAA,IAAA,EAAA;AAAL,OAJA,CAAA;AAAA,KAAA;;AAMA,IAAA,oBAAA,CAAA,cAAA,GAAA;AACA,MAAA,aAAA,EAAA,CAAA;AAAqB,QAAA,IAAA,EAAO,0CAAA,CAAA,WAAA,CAA5B;AAAqC,QAAA,IAAA,EAAA,CAAS,gDAAA,CAAA,iBAAA,CAAT,EAAwB;AAAG,UAAA,MAAA,EAAA;AAAH,SAAxB;AAArC,OAAA;AADA,KAAA;AAIA;;;;;QAIA,iB;;;;AAEA,IAAA,iBAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,UAAA,CAAZ;AAAoB,MAAA,IAAA,EAAA,CAAA;AACpB,QAAA,OAAA,EAAA,CACoB,iDAAA,CAAA,eAAA,CADpB,EAEoB,gDAAA,CAAA,cAAA,CAFpB,EAGoB,4CAAA,CAAA,cAAA,CAHpB,EAIoB,qDAAA,CAAA,iBAAA,CAJpB,EAKoB,mDAAA,CAAA,iBAAA,CALpB,CADoB;AAQpB,QAAA,OAAA,EAAA,CAAA,oBAAA,EAAgD,mDAAA,CAAA,iBAAA,CAAhD,CARoB;AASpB,QAAA,YAAA,EAAA,CAAA,oBAAA,EAAA,cAAA,CAToB;AAUpB,QAAA,eAAA,EAAA,CAAA,oBAAA,EAAA,cAAA;AAVoB,OAAA;AAApB,KADA,CAAA;AAeA;;;;;AAIA;;;;;AAIA,QAAA,6BAAA,GAAA,IAA0C,0CAAA,CAAA,gBAAA,CAA1C,CAAwD,+BAAxD,EAAwD;AACxD,MAAA,UAAA,EAAA,MADwD;AAExD,MAAA,OAAA,EAAA;AAFwD,KAAxD,CAAA;AAIA;;;;;AAIA,aAAA,qCAAA,GAAA;AACA,aAAA,IAAA,iBAAA,EAAA;AACA;AACA;;;;;QAGA,W;AACA;;;;;;;;AAQA,2BAAA,QAAA,EAAA,KAAA,EAAA,SAAA,EAAA,mBAAA,EAAA,eAAA,EAAA,cAAA,EAAA;AAAA;;AACA,aAAA,QAAA,GAAA,QAAA;AACA,aAAA,KAAA,GAAA,KAAA;AACA,aAAA,SAAA,GAAA,SAAA;AACA,aAAA,mBAAA,GAAA,mBAAA;AACA,aAAA,eAAA,GAAA,eAAA;AACA,aAAA,cAAA,GAAA,cAAA;AACA;;;;;;AAKA,aAAA,uBAAA,GAAA,IAAA;AACA;AACA;;;;;;;;;AAqBA;;;;;;;;;0CASA,S,EAAA,M,EAAA;AACA;AAAA;AAA6B,iBAAA,OAAA,CAAA,SAAA,EAAA,MAAA;AAA7B;AACA;AACA;;;;;;;;;;;yCAQA,Q,EAAA,M,EAAA;AACA,iBAAA,KAAA,OAAA,CAAA,QAAA,EAAA,MAAA,CAAA;AACA;AACA;;;;;;;;;;6BAOA,O,EAAA;AAAA,cAAA,MAAA,uEAAA,EAAA;AAAA,cAAA,MAAA;;AACA;AACA,cAAA,OAAA,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAwC,KAAA,cAAxC,EAAwC,MAAxC,CAAA,CAFA,CAGA;AACA;;;AACA,UAAA,OAAA,CAAA,IAAA,GAAA;AAAwB,YAAA,OAAA,EAAA,OAAxB;AAAwB,YAAA,MAAA,EAAA;AAAxB,WAAA;;AACA,cAAA,CAAA,OAAA,CAAA,mBAAA,EAAA;AACA,YAAA,OAAA,CAAA,mBAAA,GAAA,OAAA;AACA;;AACA,iBAAA,KAAA,iBAAA,CAAA,cAAA,EAAA,OAAA,CAAA;AACA;AACA;;;;;;;kCAIA;AACA,cAAA,KAAA,kBAAA,EAAA;AACA,iBAAA,kBAAA,CAAA,OAAA;AACA;AACA;AACA;;;;;;sCAGA;AACA;AACA,cAAA,KAAA,uBAAA,EAAA;AACA,iBAAA,uBAAA,CAAA,OAAA;AACA;AACA;AACA;;;;;;;;;;iDAOA,U,EAAA,M,EAAA;AACA;AACA,cAAA,YAAA,GAAA,MAAA,IAAA,MAAA,CAAA,gBAAA,IAAA,MAAA,CAAA,gBAAA,CAAA,QAAA;AACA;;AACA,cAAA,QAAA,GAAA,IAA6B,gDAAA,CAAA,gBAAA,CAA7B,CAA2C,YAAA,IAAA,KAAA,SAA3C,EAA2C,IAAA,OAAA,CAAA,CAC3C,CAAA,iBAAA,EAAA,MAAA,CAD2C,CAAA,CAA3C,CAAA;AAGA;;AACA,cAAA,eAAA,GAAA,IAAoC,gDAAA,CAAA,iBAAA,CAApC,CAAmD,oBAAnD,EAAmD,MAAA,CAAA,gBAAnD,EAAmD,QAAnD,CAAA;AACA;;AACA,cAAA,YAAA,GAAA,UAAA,CAAA,MAAA,CAAA,eAAA,CAAA;AACA,UAAA,YAAA,CAAA,QAAA,CAAA,cAAA,GAAA,MAAA;AACA,iBAAA,YAAA,CAAA,QAAA;AACA;AACA;;;;;;;;;;;gCAQA,O,EAAA,U,EAAA;AACA;AACA,cAAA,MAAA,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAuC,IAAA,iBAAA,EAAvC,EAAuC,KAAA,cAAvC,EAAuC,UAAvC,CAAA;AACA;;AACA,cAAA,UAAA,GAAA,KAAA,cAAA,CAAA,MAAA,CAAA;AACA;;;AACA,cAAA,SAAA,GAAA,KAAA,wBAAA,CAAA,UAAA,EAAA,MAAA,CAAA;AACA;;;AACA,cAAA,WAAA,GAAA,IAAA,cAAA,CAAA,SAAA,EAAA,UAAA,CAAA;;AACA,cAAA,OAAA,YAA+B,0CAAA,CAAA,aAAA,CAA/B,EAA0C;AAC1C;AACA,gBAAA,MAAA,GAAA,IAA+B,gDAAA,CAAA,gBAAA,CAA/B,CAA6C,OAA7C;AAA6C;AAAwB,gBAArE;AAAqE;AAA2B;AAChG,cAAA,SAAA,EAAA,MAAA,CAAA,IADgG;AAEhG,cAAA,WAAA,EAAA;AAFgG,aAAhG,CAAA;AAIA,YAAA,WAAA,CAAA,QAAA,GAAA,SAAA,CAAA,oBAAA,CAAA,MAAA,CAAA;AACA,WAPA,MAQA;AACA;AACA,gBAAA,QAAA,GAAA,KAAA,eAAA,CAAA,MAAA,EAAA,WAAA,CAAA;AACA;;;AACA,gBAAA,OAAA,GAAA,IAA+B,gDAAA,CAAA,iBAAA,CAA/B,CAA8C,OAA9C,EAA8C,SAA9C,EAA8C,QAA9C,CAAA;AACA;;;AACA,gBAAA,UAAA,GAAA,SAAA,CAAA,qBAAA,CAAA,OAAA,CAAA,CANA,CAOA;;AACA,YAAA,WAAA,CAAA,QAAA,GAAA,UAAA,CAAA,QAAA;AACA,WA1BA,CA2BA;AACA;AACA;;;AACA,eAAA,mBAAA,CAAA,OAAA,CAAyC,iDAAA,CAAA,aAAA,CAAA,CAAW,OAApD,EAAoD,IAApD,CAAmE,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAA,CAAS,UAAA,CAAA,WAAA,GAAA,IAAA,CAA+B,MAAA,CAAA,2CAAA,CAAA,MAAA,CAAA,CAAA,CAAI,CAAJ,CAA/B,CAAT,CAAnE,EAA+G,SAA/G;AAA+G;;;;AAI/G,oBAAA,QAAA,EAAA;AACA,gBAAA,QAAA,CAAA,OAAA,EAAA;AACA,cAAA,UAAA,CAAA,cAAA,CAAA,SAAA,CAAA,GAAA,CAAA,uBAAA;AACA,aAFA,MAGA;AACA,cAAA,UAAA,CAAA,cAAA,CAAA,SAAA,CAAA,MAAA,CAAA,uBAAA;AACA;AACS,WAXT;;AAYA,eAAA,gBAAA,CAAA,WAAA,EAAA,MAAA;;AACA,eAAA,kBAAA,GAAA,WAAA;AACA,iBAAA,KAAA,kBAAA;AACA;AACA;;;;;;;;;;yCAOA,W,EAAA,M,EAAA;AAAA;;AACA;AACA,UAAA,WAAA,CAAA,cAAA,GAAA,SAAA;AAAA;;;AAGA,sBAAA;AACA;AACA,gBAAA,OAAA,CAAA,kBAAA,IAAA,WAAA,EAAA;AACA,cAAA,OAAA,CAAA,kBAAA,GAAA,IAAA;AACA;;AACA,gBAAA,MAAA,CAAA,mBAAA,EAAA;AACA,cAAA,OAAA,CAAA,KAAA,CAAA,KAAA;AACA;AACS,WAXT;;AAYA,cAAA,KAAA,kBAAA,EAAA;AACA;AACA;AACA,iBAAA,kBAAA,CAAA,cAAA,GAAA,SAAA;AAAA;;;AAGA,wBAAA;AACA,cAAA,WAAA,CAAA,iBAAA,CAAA,KAAA;AACa,aALb;;AAMA,iBAAA,kBAAA,CAAA,OAAA;AACA,WAVA,MAWA;AACA;AACA,YAAA,WAAA,CAAA,iBAAA,CAAA,KAAA;AACA,WA5BA,CA6BA;;;AACA,cAAA,MAAA,CAAA,QAAA,IAAA,MAAA,CAAA,QAAA,GAAA,CAAA,EAAA;AACA,YAAA,WAAA,CAAA,WAAA,GAAA,SAAA;AAAA;;;AAGA;AAAA,qBAAA,WAAA,CAAA,aAAA;AAAA;AAA0D,cAAA,MAAA,CAAA,QAA1D,CAAA;AAAA,aAHA;AAIA;;AACA,cAAA,MAAA,CAAA,mBAAA,EAAA;AACA,iBAAA,KAAA,CAAA,QAAA,CAAA,MAAA,CAAA,mBAAA,EAAA,MAAA,CAAA,UAAA;AACA;AACA;AACA;;;;;;;;;uCAMA,M,EAAA;AACA;AACA,cAAA,aAAA,GAAA,IAAkC,iDAAA,CAAA,eAAA,CAAlC,EAAA;AACA,UAAA,aAAA,CAAA,SAAA,GAAA,MAAA,CAAA,SAAA;AACA;;AACA,cAAA,gBAAA,GAAA,KAAA,QAAA,CAAA,QAAA,GAAA,MAAA,EAAA,CALA,CAMA;;AACA;;;AACA,cAAA,KAAA,GAAA,MAAA,CAAA,SAAA,KAAA,KAAA;AACA;;AACA,cAAA,MAAA,GAAA,MAAA,CAAA,kBAAA,KAAA,MAAA,IACA,MAAA,CAAA,kBAAA,KAAA,OAAA,IAAA,CAAA,KADA,IAEA,MAAA,CAAA,kBAAA,KAAA,KAAA,IAAA,KAFA;AAGA;;AACA,cAAA,OAAA,GAAA,CAAA,MAAA,IAAA,MAAA,CAAA,kBAAA,KAAA,QAAA;;AACA,cAAA,MAAA,EAAA;AACA,YAAA,gBAAA,CAAA,IAAA,CAAA,GAAA;AACA,WAFA,MAGA,IAAA,OAAA,EAAA;AACA,YAAA,gBAAA,CAAA,KAAA,CAAA,GAAA;AACA,WAFA,MAGA;AACA,YAAA,gBAAA,CAAA,kBAAA;AACA,WAvBA,CAwBA;;;AACA,cAAA,MAAA,CAAA,gBAAA,KAAA,KAAA,EAAA;AACA,YAAA,gBAAA,CAAA,GAAA,CAAA,GAAA;AACA,WAFA,MAGA;AACA,YAAA,gBAAA,CAAA,MAAA,CAAA,GAAA;AACA;;AACA,UAAA,aAAA,CAAA,gBAAA,GAAA,gBAAA;AACA,iBAAA,KAAA,QAAA,CAAA,MAAA,CAAA,aAAA,CAAA;AACA;AACA;;;;;;;;;;;wCAQA,M,EAAA,W,EAAA;AACA;AACA,cAAA,YAAA,GAAA,MAAA,IAAA,MAAA,CAAA,gBAAA,IAAA,MAAA,CAAA,gBAAA,CAAA,QAAA;AACA,iBAAA,IAAmB,gDAAA,CAAA,gBAAA,CAAnB,CAAiC,YAAA,IAAA,KAAA,SAAjC,EAAiC,IAAA,OAAA,CAAA,CACjC,CAAA,cAAA,EAAA,WAAA,CADiC,EAEjC,CAAA,kBAAA,EAAA,MAAA,CAAA,IAAA,CAFiC,CAAA,CAAjC,CAAA;AAIA;;;4BA7PA;AACA;AACA,cAAA,MAAA,GAAA,KAAA,eAAA;AACA,iBAAA,MAAA,GAAA,MAAA,CAAA,kBAAA,GAAA,KAAA,uBAAA;AACA;AACA;;;;;0BAIA,K,EAAA;AACA,cAAA,KAAA,eAAA,EAAA;AACA,iBAAA,eAAA,CAAA,kBAAA,GAAA,KAAA;AACA,WAFA,MAGA;AACA,iBAAA,uBAAA,GAAA,KAAA;AACA;AACA;;;;;;AA+OA,IAAA,WAAA,CAAA,UAAA,GAAA,CACA;AAAK,MAAA,IAAA,EAAO,0CAAA,CAAA,YAAA,CAAZ;AAAsB,MAAA,IAAA,EAAA,CAAA;AAAU,QAAA,UAAA,EAAA;AAAV,OAAA;AAAtB,KADA,CAAA;AAGA;;AACA,IAAA,WAAA,CAAA,cAAA,GAAA;AAAA,aAAA,CACA;AAAK,QAAA,IAAA,EAAO,iDAAA,CAAA,SAAA;AAAZ,OADA,EAEA;AAAK,QAAA,IAAA,EAAO,8CAAA,CAAA,eAAA;AAAZ,OAFA,EAGA;AAAK,QAAA,IAAA,EAAO,0CAAA,CAAA,UAAA;AAAZ,OAHA,EAIA;AAAK,QAAA,IAAA,EAAO,iDAAA,CAAA,oBAAA;AAAZ,OAJA,EAKA;AAAK,QAAA,IAAA,EAAA,WAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAkC,UAAA,IAAA,EAAO,0CAAA,CAAA,UAAA;AAAzC,SAAA,EAAmD;AAAG,UAAA,IAAA,EAAO,0CAAA,CAAA,UAAA;AAAV,SAAnD;AAAL,OALA,EAMA;AAAK,QAAA,IAAA,EAAA,iBAAL;AAAK,QAAA,UAAA,EAAA,CAAA;AAAwC,UAAA,IAAA,EAAO,0CAAA,CAAA,QAAA,CAA/C;AAAqD,UAAA,IAAA,EAAA,CAAA,6BAAA;AAArD,SAAA;AAAL,OANA,CAAA;AAAA,KAAA;AAQA;;;AAAA,IAAA,WAAA,CAAA,eAAA,GAAiD,MAAA,CAAA,0CAAA,CAAA,oBAAA,CAAA,CAAA,CAAkB;AAAE,MAAA,OAAA,EAAA,SAAA,mBAAA,GAAA;AAA0C,eAAA,IAAA,WAAA,CAAwB,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS,iDAAA,CAAA,SAAA,CAAT,CAAxB,EAA2C,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS,8CAAA,CAAA,eAAA,CAAT,CAA3C,EAAoE,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS,0CAAA,CAAA,UAAA,CAAT,CAApE,EAAwF,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS,iDAAA,CAAA,oBAAA,CAAT,CAAxF,EAAsH,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAQ,WAAR,EAAQ,EAAR,CAAtH,EAAiJ,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAQ,6BAAR,CAAjJ,CAAA;AAA4L,OAAxO;AAAwO,MAAA,KAAA,EAAA,WAAxO;AAAwO,MAAA,UAAA,EAAA;AAAxO,KAAlB,CAAjD;AAEA;;;;;AAKA;;;;AAMA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, Input, Output, EventEmitter, Optional, ChangeDetectorRef, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate unique ID for each accordion.\n * @type {?}\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /**\n         * Emits when the state of the accordion changes\n         */\n        this._stateChanges = new Subject();\n        /**\n         * Stream that emits true/false when openAll/closeAll is triggered.\n         */\n        this._openCloseAllActions = new Subject();\n        /**\n         * A readonly id value to use for unique selection coordination.\n         */\n        this.id = `cdk-accordion-${nextId++}`;\n        this._multi = false;\n    }\n    /**\n     * Whether the accordion should allow multiple expanded accordion items simultaneously.\n     * @return {?}\n     */\n    get multi() { return this._multi; }\n    /**\n     * @param {?} multi\n     * @return {?}\n     */\n    set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n    /**\n     * Opens all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    openAll() {\n        this._openCloseAll(true);\n    }\n    /**\n     * Closes all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    closeAll() {\n        this._openCloseAll(false);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /**\n     * @private\n     * @param {?} expanded\n     * @return {?}\n     */\n    _openCloseAll(expanded) {\n        if (this.multi) {\n            this._openCloseAllActions.next(expanded);\n        }\n    }\n}\nCdkAccordion.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion',\n            },] },\n];\nCdkAccordion.propDecorators = {\n    multi: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate unique ID for each accordion item.\n * @type {?}\n */\nlet nextId$1 = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _expansionDispatcher\n     */\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /**\n         * Subscription to openAll/closeAll events.\n         */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /**\n         * Event emitted every time the AccordionItem is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted every time the AccordionItem is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event emitted when the AccordionItem is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * \\@docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /**\n         * The unique AccordionItem id.\n         */\n        this.id = `cdk-accordion-child-${nextId$1++}`;\n        this._expanded = false;\n        this._disabled = false;\n        /**\n         * Unregister function for _expansionDispatcher.\n         */\n        this._removeUniqueSelectionListener = (/**\n         * @return {?}\n         */\n        () => { });\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen((/**\n             * @param {?} id\n             * @param {?} accordionId\n             * @return {?}\n             */\n            (id, accordionId) => {\n                if (this.accordion && !this.accordion.multi &&\n                    this.accordion.id === accordionId && this.id !== id) {\n                    this.expanded = false;\n                }\n            }));\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /**\n     * Whether the AccordionItem is expanded.\n     * @return {?}\n     */\n    get expanded() { return this._expanded; }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    set expanded(expanded) {\n        expanded = coerceBooleanProperty(expanded);\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 * @type {?}\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the AccordionItem is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe((/**\n         * @param {?} expanded\n         * @return {?}\n         */\n        expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        }));\n    }\n}\nCdkAccordionItem.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                    // to the same accordion.\n                    { provide: CdkAccordion, useValue: ɵ0 },\n                ],\n            },] },\n];\n/** @nocollapse */\nCdkAccordionItem.ctorParameters = () => [\n    { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher }\n];\nCdkAccordionItem.propDecorators = {\n    closed: [{ type: Output }],\n    opened: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    expandedChange: [{ type: Output }],\n    expanded: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkAccordionModule {\n}\nCdkAccordionModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { CdkAccordionItem, CdkAccordion, CdkAccordionModule };\n//# sourceMappingURL=accordion.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, ElementRef, Input, Inject, Optional, Output, SkipSelf, ViewContainerRef, ViewEncapsulation, ViewChild, Host, ContentChildren, NgModule } from '@angular/core';\nimport { animate, animateChild, group, state, style, transition, trigger, query } from '@angular/animations';\nimport { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge, Subscription, EMPTY } from 'rxjs';\nimport { filter, startWith, take, distinctUntilChanged } from 'rxjs/operators';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, SPACE, hasModifierKey, HOME, END } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n * @type {?}\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time and timing curve for expansion panel animations.\n * @type {?}\n */\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * \\@docs-private\n * @type {?}\n */\nconst matExpansionAnimations = {\n    /**\n     * Animation that rotates the indicator arrow.\n     */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /**\n     * Animation that expands and collapses the panel header height.\n     */\n    expansionHeaderHeight: trigger('expansionHeight', [\n        state('collapsed, void', style({\n            height: '{{collapsedHeight}}',\n        }), {\n            params: { collapsedHeight: '48px' },\n        }),\n        state('expanded', style({\n            height: '{{expandedHeight}}'\n        }), {\n            params: { expandedHeight: '64px' }\n        }),\n        transition('expanded <=> collapsed, void => collapsed', group([\n            query('@indicatorRotate', animateChild(), { optional: true }),\n            animate(EXPANSION_PANEL_ANIMATION_TIMING),\n        ])),\n    ]),\n    /**\n     * Animation that expands and collapses the panel content.\n     */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    /**\n     * @param {?} _template\n     */\n    constructor(_template) {\n        this._template = _template;\n    }\n}\nMatExpansionPanelContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[matExpansionPanelContent]'\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanelContent.ctorParameters = () => [\n    { type: TemplateRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter for generating unique element ids.\n * @type {?}\n */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n * @type {?}\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nconst ɵ0 = undefined;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _uniqueSelectionDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _document\n     * @param {?} _animationMode\n     * @param {?=} defaultOptions\n     */\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /**\n         * An event emitted after the body's expansion animation happens.\n         */\n        this.afterExpand = new EventEmitter();\n        /**\n         * An event emitted after the body's collapse animation happens.\n         */\n        this.afterCollapse = new EventEmitter();\n        /**\n         * Stream that emits for changes in `\\@Input` properties.\n         */\n        this._inputChanges = new Subject();\n        /**\n         * ID for the associated header element. Used for a11y labelling.\n         */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        /**\n         * Stream of body animation done events.\n         */\n        this._bodyAnimationDone = new Subject();\n        this.accordion = accordion;\n        this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._bodyAnimationDone.pipe(distinctUntilChanged((/**\n         * @param {?} x\n         * @param {?} y\n         * @return {?}\n         */\n        (x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        }));\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /**\n     * Whether the toggle indicator should be hidden.\n     * @return {?}\n     */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the toggle indicator should be hidden.\n     * @return {?}\n     */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    _hasSpacing() {\n        if (this.accordion) {\n            // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n            // the [displayMode] input changes, the change detection will also cover the host bindings\n            // of this expansion panel.\n            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n        }\n        return false;\n    }\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        if (this._lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened.pipe(startWith((/** @type {?} */ (null))), filter((/**\n             * @return {?}\n             */\n            () => this.expanded && !this._portal)), take(1)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            }));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    }\n    /**\n     * Checks whether the expansion panel's content contains the currently-focused element.\n     * @return {?}\n     */\n    _containsFocus() {\n        if (this._body) {\n            /** @type {?} */\n            const focusedElement = this._document.activeElement;\n            /** @type {?} */\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n}\nMatExpansionPanel.decorators = [\n    { type: Component, args: [{styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(.4,0,.2,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}@media (-ms-high-contrast:active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel._mat-animation-noopable,.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button{margin-left:0;margin-right:8px}\"],\n                selector: 'mat-expansion-panel',\n                exportAs: 'matExpansionPanel',\n                template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content><div class=\\\"mat-expansion-panel-content\\\" role=\\\"region\\\" [@bodyExpansion]=\\\"_getExpandedState()\\\" (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\" [attr.aria-labelledby]=\\\"_headerId\\\" [id]=\\\"id\\\" #body><div class=\\\"mat-expansion-panel-body\\\"><ng-content></ng-content><ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template></div><ng-content select=\\\"mat-action-row\\\"></ng-content></div>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled', 'expanded'],\n                outputs: ['opened', 'closed', 'expandedChange'],\n                animations: [matExpansionAnimations.bodyExpansion],\n                providers: [\n                    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                    // to the same accordion.\n                    { provide: MAT_ACCORDION, useValue: ɵ0 },\n                ],\n                host: {\n                    'class': 'mat-expansion-panel',\n                    '[class.mat-expanded]': 'expanded',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                }\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanel.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ACCORDION,] }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n];\nMatExpansionPanel.propDecorators = {\n    hideToggle: [{ type: Input }],\n    togglePosition: [{ type: Input }],\n    afterExpand: [{ type: Output }],\n    afterCollapse: [{ type: Output }],\n    _lazyContent: [{ type: ContentChild, args: [MatExpansionPanelContent, { static: false },] }],\n    _body: [{ type: ViewChild, args: ['body', { static: false },] }]\n};\nclass MatExpansionPanelActionRow {\n}\nMatExpansionPanelActionRow.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-action-row',\n                host: {\n                    class: 'mat-action-row'\n                }\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader {\n    /**\n     * @param {?} panel\n     * @param {?} _element\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?=} defaultOptions\n     */\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions) {\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        /**\n         * Whether Angular animations in the panel header should be disabled.\n         */\n        this._animationsDisabled = true;\n        /** @type {?} */\n        const accordionHideToggleChange = panel.accordion ?\n            panel.accordion._stateChanges.pipe(filter((/**\n             * @param {?} changes\n             * @return {?}\n             */\n            changes => !!(changes['hideToggle'] || changes['togglePosition'])))) :\n            EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription =\n            merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter((/**\n             * @param {?} changes\n             * @return {?}\n             */\n            changes => {\n                return !!(changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n            }))))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._changeDetectorRef.markForCheck()));\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter((/**\n         * @return {?}\n         */\n        () => panel._containsFocus())))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => _focusMonitor.focusVia(_element, 'program')));\n        _focusMonitor.monitor(_element).subscribe((/**\n         * @param {?} origin\n         * @return {?}\n         */\n        origin => {\n            if (origin && panel.accordion) {\n                panel.accordion._handleHeaderFocus(this);\n            }\n        }));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _animationStarted() {\n        // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n        // there to work around a bug in Angular (see #13088), however this introduces a different\n        // issue. The new transition will cause the header to animate in on init (see #16067), if the\n        // consumer has set a header height that is different from the default one. We work around it\n        // by disabling animations on the header and re-enabling them after the first animation has run.\n        // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n        // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n        // for https://github.com/angular/angular/issues/18847 to be resolved.\n        this._animationsDisabled = false;\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    _toggle() {\n        this.panel.toggle();\n    }\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /**\n     * Gets the toggle position for the header.\n     * @return {?}\n     */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Handle keydown event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @param {?=} origin Origin of the action that triggered the focus.\n     * @return {?}\n     */\n    focus(origin = 'program') {\n        this._focusMonitor.focusVia(this._element, origin);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n}\nMatExpansionPanelHeader.decorators = [\n    { type: Component, args: [{selector: 'mat-expansion-panel-header',\n                styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"],\n                template: \"<span class=\\\"mat-content\\\"><ng-content select=\\\"mat-panel-title\\\"></ng-content><ng-content select=\\\"mat-panel-description\\\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\" class=\\\"mat-expansion-indicator\\\"></span>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [\n                    matExpansionAnimations.indicatorRotate,\n                    matExpansionAnimations.expansionHeaderHeight\n                ],\n                host: {\n                    'class': 'mat-expansion-panel-header',\n                    'role': 'button',\n                    '[attr.id]': 'panel._headerId',\n                    '[attr.tabindex]': 'disabled ? -1 : 0',\n                    '[attr.aria-controls]': '_getPanelId()',\n                    '[attr.aria-expanded]': '_isExpanded()',\n                    '[attr.aria-disabled]': 'panel.disabled',\n                    '[class.mat-expanded]': '_isExpanded()',\n                    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                    '(click)': '_toggle()',\n                    '(keydown)': '_keydown($event)',\n                    '[@.disabled]': '_animationsDisabled',\n                    '(@expansionHeight.start)': '_animationStarted()',\n                    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n                },\n            },] },\n];\n/** @nocollapse */\nMatExpansionPanelHeader.ctorParameters = () => [\n    { type: MatExpansionPanel, decorators: [{ type: Host }] },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n];\nMatExpansionPanelHeader.propDecorators = {\n    expandedHeight: [{ type: Input }],\n    collapsedHeight: [{ type: Input }]\n};\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nclass MatExpansionPanelDescription {\n}\nMatExpansionPanelDescription.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-panel-description',\n                host: {\n                    class: 'mat-expansion-panel-header-description'\n                }\n            },] },\n];\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nclass MatExpansionPanelTitle {\n}\nMatExpansionPanelTitle.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-panel-title',\n                host: {\n                    class: 'mat-expansion-panel-header-title'\n                }\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /**\n         * The position of the expansion indicator.\n         */\n        this.togglePosition = 'after';\n    }\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    get hideToggle() { return this._hideToggle; }\n    /**\n     * @param {?} show\n     * @return {?}\n     */\n    set hideToggle(show) { this._hideToggle = coerceBooleanProperty(show); }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this._headers).withWrap();\n    }\n    /**\n     * Handles keyboard events coming in from the panel headers.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleHeaderKeydown(event) {\n        const { keyCode } = event;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (keyCode === HOME) {\n            if (!hasModifierKey(event)) {\n                manager.setFirstItemActive();\n                event.preventDefault();\n            }\n        }\n        else if (keyCode === END) {\n            if (!hasModifierKey(event)) {\n                manager.setLastItemActive();\n                event.preventDefault();\n            }\n        }\n        else {\n            this._keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * @param {?} header\n     * @return {?}\n     */\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n}\nMatAccordion.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-accordion',\n                exportAs: 'matAccordion',\n                inputs: ['multi'],\n                providers: [{\n                        provide: MAT_ACCORDION,\n                        useExisting: MatAccordion\n                    }],\n                host: {\n                    class: 'mat-accordion'\n                }\n            },] },\n];\nMatAccordion.propDecorators = {\n    _headers: [{ type: ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\n    hideToggle: [{ type: Input }],\n    displayMode: [{ type: Input }],\n    togglePosition: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatExpansionModule {\n}\nMatExpansionModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, CdkAccordionModule, PortalModule],\n                exports: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n                declarations: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatExpansionModule, MatAccordion, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionPanelContent, EXPANSION_PANEL_ANIMATION_TIMING, matExpansionAnimations };\n//# sourceMappingURL=expansion.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nclass MatSnackBarRef {\n    /**\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe((/**\n         * @return {?}\n         */\n        () => this.dismiss()));\n        containerInstance._onExit.subscribe((/**\n         * @return {?}\n         */\n        () => this._finishDismiss()));\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    _dismissAfter(duration) {\n        this._durationTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => this.dismiss()), duration);\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @private\n     * @return {?}\n     */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    /**\n     * @param {?} snackBarRef\n     * @param {?} data\n     */\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.decorators = [\n    { type: Component, args: [{selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar',\n                }\n            },] },\n];\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material snack bar.\n * \\@docs-private\n * @type {?}\n */\nconst matSnackBarAnimations = {\n    /**\n     * Animation that shows and hides a snack bar.\n     */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} snackBarConfig\n     */\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        this._animationState = 'void';\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._role = 'alert';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._role = null;\n        }\n        else {\n            this._role = 'status';\n        }\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            /** @type {?} */\n            const onEnter = this._onEnter;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                onEnter.next();\n                onEnter.complete();\n            }));\n        }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @private\n     * @return {?}\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._onExit.next();\n            this._onExit.complete();\n        }));\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @private\n     * @return {?}\n     */\n    _applySnackBarClasses() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach((/**\n                 * @param {?} cssClass\n                 * @return {?}\n                 */\n                cssClass => element.classList.add(cssClass)));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @private\n     * @return {?}\n     */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.decorators = [\n    { type: Component, args: [{selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\",\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"],\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    '[attr.role]': '_role',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n            },] },\n];\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify default snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _injector\n     * @param {?} _breakpointObserver\n     * @param {?} _parentSnackBar\n     * @param {?} _defaultConfig\n     */\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened snackbar at *any* level.\n     * @return {?}\n     */\n    get _openedSnackBarRef() {\n        /** @type {?} */\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromComponent(component, config) {\n        return (/** @type {?} */ (this._attach(component, config)));\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    open(message, action = '', config) {\n        /** @type {?} */\n        const _config = Object.assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @private\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @private\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    _attach(content, userConfig) {\n        /** @type {?} */\n        const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            /** @type {?} */\n            const portal = new TemplatePortal(content, (/** @type {?} */ (null)), (/** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef\n            })));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            const portal = new ComponentPortal(content, undefined, injector);\n            /** @type {?} */\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.Handset).pipe(takeUntil(overlayRef.detachments().pipe(take(1)))).subscribe((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state$$1 => {\n            if (state$$1.matches) {\n                overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n            }\n            else {\n                overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n            }\n        }));\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @private\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        }));\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                snackBarRef.containerInstance.enter();\n            }));\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe((/**\n             * @return {?}\n             */\n            () => snackBarRef._dismissAfter((/** @type {?} */ (config.duration)))));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @private\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        /** @type {?} */\n        const isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @private\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    _createInjector(config, snackBarRef) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    }\n}\nMatSnackBar.decorators = [\n    { type: Injectable, args: [{ providedIn: MatSnackBarModule },] },\n];\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/** @nocollapse */ MatSnackBar.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n//# sourceMappingURL=snack-bar.js.map\n"],"sourceRoot":"webpack:///","file":"default~e-commerce-e-commerce-module~main-angular-material-elements-angular-material-elements-module~04cdda69-es5.js"}