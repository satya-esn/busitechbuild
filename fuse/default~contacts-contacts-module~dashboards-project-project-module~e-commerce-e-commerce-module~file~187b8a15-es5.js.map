{"version":3,"sources":["node_modules/@angular/cdk/esm2015/table.js","node_modules/@angular/material/esm2015/table.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, Inject, isDevMode, Optional, ViewChild, InjectionToken, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { isDataSource } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /**\n             * Whether the sticky input has changed since it was last checked.\n             */\n            this._hasStickyChanged = false;\n        }\n        /**\n         * Whether sticky positioning should be applied.\n         * @return {?}\n         */\n        get sticky() { return this._sticky; }\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set sticky(v) {\n            /** @type {?} */\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        hasStickyChanged() {\n            /** @type {?} */\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellDef]' },] },\n];\n/** @nocollapse */\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkHeaderCellDef]' },] },\n];\n/** @nocollapse */\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkFooterCellDef]' },] },\n];\n/** @nocollapse */\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nclass CdkColumnDefBase {\n}\n/** @type {?} */\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor() {\n        super(...arguments);\n        this._stickyEnd = false;\n    }\n    /**\n     * Unique name for this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        // trigger with an empty string and should not overwrite the programatically set value.\n        if (!name) {\n            return;\n        }\n        this._name = name;\n        this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     * @return {?}\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set stickyEnd(v) {\n        /** @type {?} */\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n}\nCdkColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n            },] },\n];\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef, { static: false },] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef, { static: false },] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef, { static: false },] }]\n};\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nclass BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        /** @type {?} */\n        const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass CdkHeaderCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass CdkFooterCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass CdkCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @type {?}\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nclass BaseRowDef {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            /** @type {?} */\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n            },] },\n];\n/** @nocollapse */\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n            },] },\n];\n/** @nocollapse */\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n}\nCdkRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n            },] },\n];\n/** @nocollapse */\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * @param {?} _viewContainer\n     */\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellOutlet]' },] },\n];\n/** @nocollapse */\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.decorators = [\n    { type: Component, args: [{selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkFooterRow {\n}\nCdkFooterRow.decorators = [\n    { type: Component, args: [{selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkRow {\n}\nCdkRow.decorators = [\n    { type: Component, args: [{selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n * @type {?}\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nclass StickyStyler {\n    /**\n     * @param {?} _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param {?} _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser = true) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (let i = 0; i < row.children.length; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n        /** @type {?} */\n        const hasStickyColumns = stickyStartStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state)) || stickyEndStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state));\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        const firstRow = rows[0];\n        /** @type {?} */\n        const numCells = firstRow.children.length;\n        /** @type {?} */\n        const cellWidths = this._getCellWidths(firstRow);\n        /** @type {?} */\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        /** @type {?} */\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        /** @type {?} */\n        const isRtl = this.direction === 'rtl';\n        for (const row of rows) {\n            for (let i = 0; i < numCells; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on.\n        /** @type {?} */\n        const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n        /** @type {?} */\n        let stickyHeight = 0;\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!stickyStates[rowIndex]) {\n                continue;\n            }\n            /** @type {?} */\n            const row = rows[rowIndex];\n            if (this._isNativeHtmlTable) {\n                for (let j = 0; j < row.children.length; j++) {\n                    /** @type {?} */\n                    const cell = (/** @type {?} */ (row.children[j]));\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        /** @type {?} */\n        const tfoot = (/** @type {?} */ (tableElement.querySelector('tfoot')));\n        if (stickyStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => !state))) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        /** @type {?} */\n        const hasDirection = STICKY_DIRECTIONS.some((/**\n         * @param {?} dir\n         * @return {?}\n         */\n        dir => !!element.style[dir]));\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    _addStickyStyle(element, dir, dirValue) {\n        element.classList.add(this._stickCellCss);\n        element.style[dir] = `${dirValue}px`;\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    _getCalculatedZIndex(element) {\n        /** @type {?} */\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        /** @type {?} */\n        let zIndex = 0;\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    _getCellWidths(row) {\n        /** @type {?} */\n        const cellWidths = [];\n        /** @type {?} */\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            /** @type {?} */\n            let cell = (/** @type {?} */ (firstRowCells[i]));\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nclass DataRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[rowOutlet]' },] },\n];\n/** @nocollapse */\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nclass HeaderRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[headerRowOutlet]' },] },\n];\n/** @nocollapse */\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nclass FooterRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[footerRowOutlet]' },] },\n];\n/** @nocollapse */\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nclass CdkTable {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} role\n     * @param {?} _dir\n     * @param {?} _document\n     * @param {?} _platform\n     */\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *it's* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *it's* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *it's* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *it's* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        this._multiTemplateDataRows = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * \\@docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @return {?}\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set trackBy(fn) {\n        if (isDevMode() && fn != null && typeof fn !== 'function' && (/** @type {?} */ (console)) &&\n            (/** @type {?} */ (console.warn))) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     * @return {?}\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     * @return {?}\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((/**\n         * @param {?} _i\n         * @param {?} dataRow\n         * @return {?}\n         */\n        (_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            return;\n        }\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} prevIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, prevIndex, currentIndex) => {\n            if (record.previousIndex == null) {\n                this._insertRow(record.item, (/** @type {?} */ (currentIndex)));\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (prevIndex)));\n            }\n            else {\n                /** @type {?} */\n                const view = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (prevIndex)))));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const rowView = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (record.currentIndex)))));\n            rowView.context.$implicit = record.item.data;\n        }));\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    setHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    setFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyHeaderRowStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._headerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyFooterRowStyles() {\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._footerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    updateStickyColumnStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((/**\n         * @param {?} headerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        }));\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            // Collect all the rows rendered with this row definition.\n            /** @type {?} */\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        }));\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((/**\n         * @param {?} footerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        }));\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @private\n     * @return {?}\n     */\n    _getAllRenderRows() {\n        /** @type {?} */\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        /** @type {?} */\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            /** @type {?} */\n            let data = this._data[i];\n            /** @type {?} */\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                /** @type {?} */\n                let renderRow = renderRowsForData[j];\n                /** @type {?} */\n                const cache = (/** @type {?} */ (this._cachedRenderRowsMap.get(renderRow.data)));\n                if (cache.has(renderRow.rowDef)) {\n                    (/** @type {?} */ (cache.get(renderRow.rowDef))).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @private\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        /** @type {?} */\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            /** @type {?} */\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? (/** @type {?} */ (cache.get(rowDef))) : [];\n            if (cachedRenderRows.length) {\n                /** @type {?} */\n                const dataRow = (/** @type {?} */ (cachedRenderRows.shift()));\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        }));\n    }\n    /**\n     * Update the map containing the content's column definitions.\n     * @private\n     * @return {?}\n     */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        /** @type {?} */\n        const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n        columnDefs.forEach((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => {\n            if (this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        }));\n    }\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @private\n     * @return {?}\n     */\n    _cacheRowDefs() {\n        this._headerRowDefs =\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs =\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        /** @type {?} */\n        const defaultRowDefs = this._rowDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => !def.when));\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @private\n     * @return {?}\n     */\n    _renderUpdatedColumns() {\n        /** @type {?} */\n        const columnsDiffReducer = (/**\n         * @param {?} acc\n         * @param {?} def\n         * @return {?}\n         */\n        (acc, def) => acc || !!def.getColumnsDiff());\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        /** @type {?} */\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (this.dataSource instanceof Observable) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data || [];\n            this.renderRows();\n        }));\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._headerRowOutlet, def, i)));\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._footerRowOutlet, def, i)));\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @private\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _addStickyColumnStyles(rows, rowDef) {\n        /** @type {?} */\n        const columnDefs = Array.from(rowDef.columns || []).map((/**\n         * @param {?} columnName\n         * @return {?}\n         */\n        columnName => {\n            /** @type {?} */\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return (/** @type {?} */ (columnDef));\n        }));\n        /** @type {?} */\n        const stickyStartStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.sticky));\n        /** @type {?} */\n        const stickyEndStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.stickyEnd));\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    }\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    _getRenderedRows(rowOutlet) {\n        /** @type {?} */\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            /** @type {?} */\n            const viewRef = ((/** @type {?} */ ((/** @type {?} */ (rowOutlet.viewContainer.get(i))))));\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => !def.when || def.when(dataIndex, data)));\n        }\n        else {\n            /** @type {?} */\n            let rowDef = this._rowDefs.find((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => def.when && def.when(dataIndex, data))) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @private\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    _insertRow(renderRow, renderIndex) {\n        /** @type {?} */\n        const rowDef = renderRow.rowDef;\n        /** @type {?} */\n        const context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @private\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @private\n     * @return {?}\n     */\n    _updateRowIndexContext() {\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (viewContainer.get(renderIndex)));\n            /** @type {?} */\n            const context = (/** @type {?} */ (viewRef.context));\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /**\n     * Gets the column definitions for the provided row def.\n     * @private\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, (/**\n         * @param {?} columnId\n         * @return {?}\n         */\n        columnId => {\n            /** @type {?} */\n            const column = this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        }));\n    }\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @private\n     * @return {?}\n     */\n    _applyNativeTableSections() {\n        /** @type {?} */\n        const documentFragment = this._document.createDocumentFragment();\n        /** @type {?} */\n        const sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\n        ];\n        for (const section of sections) {\n            /** @type {?} */\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @private\n     * @return {?}\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @private\n     * @return {?}\n     */\n    _checkStickyStates() {\n        /** @type {?} */\n        const stickyCheckReducer = (/**\n         * @param {?} acc\n         * @param {?} d\n         * @return {?}\n         */\n        (acc, d) => {\n            return acc || d.hasStickyChanged();\n        });\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @private\n     * @return {?}\n     */\n    _setupStickyStyler() {\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        }));\n    }\n}\nCdkTable.decorators = [\n    { type: Component, args: [{selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table',\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n/** @nocollapse */\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef,] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef,] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef,] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef,] }]\n};\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\nfunction mergeQueryListAndSet(queryList, set) {\n    return queryList.toArray().concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the text column options.\n * @type {?}\n */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass CdkTextColumn {\n    /**\n     * @param {?} _table\n     * @param {?} _options\n     */\n    constructor(_table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /**\n         * Alignment of the cell values.\n         */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /**\n     * Column name that should be used to reference this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((/**\n                 * @param {?} data\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (data, name) => ((/** @type {?} */ (data)))[name]));\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     * @return {?}\n     */\n    _createDefaultHeaderText() {\n        /** @type {?} */\n        const name = this.name;\n        if (isDevMode() && !name) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /**\n     * Synchronizes the column definition name with the text column name.\n     * @private\n     * @return {?}\n     */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.decorators = [\n    { type: Component, args: [{selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n/** @nocollapse */\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n];\nclass CdkTableModule {\n}\nCdkTableModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput, TEXT_COLUMN_OPTIONS, CdkTextColumn };\n//# sourceMappingURL=table.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TABLE_TEMPLATE, CdkTable, CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef, CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation, Directive, ElementRef, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, combineLatest, merge, of, Subscription, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /**\n         * Overrides the sticky CSS class set by the `CdkTable`.\n         */\n        this.stickyCssClass = 'mat-table-sticky';\n    }\n}\nMatTable.decorators = [\n    { type: Component, args: [{selector: 'mat-table, table[mat-table]',\n                exportAs: 'matTable',\n                template: CDK_TABLE_TEMPLATE,\n                styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-footer-cell:last-of-type,mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type,th.mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type,[dir=rtl] th.mat-header-cell:first-of-type{padding-left:0;padding-right:24px}td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type,th.mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type,[dir=rtl] th.mat-header-cell:last-of-type{padding-right:0;padding-left:24px}\"],\n                host: {\n                    'class': 'mat-table',\n                },\n                providers: [{ provide: CdkTable, useExisting: MatTable }],\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n}\nMatCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matCellDef]',\n                providers: [{ provide: CdkCellDef, useExisting: MatCellDef }]\n            },] },\n];\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n}\nMatHeaderCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderCellDef]',\n                providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\n            },] },\n];\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n}\nMatFooterCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matFooterCellDef]',\n                providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]\n            },] },\n];\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n}\nMatColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matColumnDef]',\n                providers: [\n                    { provide: CdkColumnDef, useExisting: MatColumnDef },\n                    { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n                ],\n            },] },\n];\nMatColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['matColumnDef',] }],\n    sticky: [{ type: Input }],\n    stickyEnd: [{ type: Input }]\n};\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass MatHeaderCell extends CdkHeaderCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-header-cell, th[mat-header-cell]',\n                host: {\n                    'class': 'mat-header-cell',\n                    'role': 'columnheader',\n                },\n            },] },\n];\n/** @nocollapse */\nMatHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass MatFooterCell extends CdkFooterCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatFooterCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-footer-cell, td[mat-footer-cell]',\n                host: {\n                    'class': 'mat-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nMatFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass MatCell extends CdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-cell, td[mat-cell]',\n                host: {\n                    'class': 'mat-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nMatCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n}\nMatHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderRowDef]',\n                providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n            },] },\n];\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n}\nMatFooterRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matFooterRowDef]',\n                providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n            },] },\n];\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass MatRowDef extends CdkRowDef {\n}\nMatRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matRowDef]',\n                providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatHeaderRow extends CdkHeaderRow {\n}\nMatHeaderRow.decorators = [\n    { type: Component, args: [{selector: 'mat-header-row, tr[mat-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matHeaderRow',\n                providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatFooterRow extends CdkFooterRow {\n}\nMatFooterRow.decorators = [\n    { type: Component, args: [{selector: 'mat-footer-row, tr[mat-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matFooterRow',\n                providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n            },] },\n];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatRow extends CdkRow {\n}\nMatRow.decorators = [\n    { type: Component, args: [{selector: 'mat-row, tr[mat-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRow',\n                providers: [{ provide: CdkRow, useExisting: MatRow }],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass MatTextColumn extends CdkTextColumn {\n}\nMatTextColumn.decorators = [\n    { type: Component, args: [{selector: 'mat-text-column',\n                template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n}\nMatTableModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CdkTableModule,\n                    CommonModule,\n                    MatCommonModule,\n                ],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n * @type {?}\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n * @template T\n */\nclass MatTableDataSource extends DataSource {\n    /**\n     * @param {?=} initialData\n     */\n    constructor(initialData = []) {\n        super();\n        /**\n         * Stream emitting render data to the table (depends on ordered data changes).\n         */\n        this._renderData = new BehaviorSubject([]);\n        /**\n         * Stream that emits when a new filter string is set on the data source.\n         */\n        this._filter = new BehaviorSubject('');\n        /**\n         * Used to react to internal changes of the paginator that are made by the data source itself.\n         */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = Subscription.EMPTY;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (/**\n         * @param {?} data\n         * @param {?} sortHeaderId\n         * @return {?}\n         */\n        (data, sortHeaderId) => {\n            /** @type {?} */\n            const value = ((/** @type {?} */ (data)))[sortHeaderId];\n            if (_isNumberValue(value)) {\n                /** @type {?} */\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        });\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (/**\n         * @param {?} data\n         * @param {?} sort\n         * @return {?}\n         */\n        (data, sort) => {\n            /** @type {?} */\n            const active = sort.active;\n            /** @type {?} */\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => {\n                /** @type {?} */\n                let valueA = this.sortingDataAccessor(a, active);\n                /** @type {?} */\n                let valueB = this.sortingDataAccessor(b, active);\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come first.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                /** @type {?} */\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            }));\n        });\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @return Whether the filter matches against the data\n         */\n        this.filterPredicate = (/**\n         * @param {?} data\n         * @param {?} filter\n         * @return {?}\n         */\n        (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            /** @type {?} */\n            const dataStr = Object.keys(data).reduce((/**\n             * @param {?} currentTerm\n             * @param {?} key\n             * @return {?}\n             */\n            (currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + ((/** @type {?} */ (data)))[key] + '◬';\n            }), '').toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            /** @type {?} */\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        });\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Array of data that should be rendered by the table, where each object represents one row.\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    set data(data) { this._data.next(data); }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     * @return {?}\n     */\n    get filter() { return this._filter.value; }\n    /**\n     * @param {?} filter\n     * @return {?}\n     */\n    set filter(filter) { this._filter.next(filter); }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     * @return {?}\n     */\n    get sort() { return this._sort; }\n    /**\n     * @param {?} sort\n     * @return {?}\n     */\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     * @return {?}\n     */\n    get paginator() { return this._paginator; }\n    /**\n     * @param {?} paginator\n     * @return {?}\n     */\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        /** @type {?} */\n        const sortChange = this._sort ?\n            (/** @type {?} */ (merge(this._sort.sortChange, this._sort.initialized))) :\n            of(null);\n        /** @type {?} */\n        const pageChange = this._paginator ?\n            (/** @type {?} */ (merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized))) :\n            of(null);\n        /** @type {?} */\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        /** @type {?} */\n        const filteredData = combineLatest(dataStream, this._filter)\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._filterData(data))));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        /** @type {?} */\n        const orderedData = combineLatest(filteredData, sortChange)\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._orderData(data))));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        /** @type {?} */\n        const paginatedData = combineLatest(orderedData, pageChange)\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._pageData(data))));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => this._renderData.next(data)));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData =\n            !this.filter ? data : data.filter((/**\n             * @param {?} obj\n             * @return {?}\n             */\n            obj => this.filterPredicate(obj, this.filter)));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        /** @type {?} */\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice().splice(startIndex, this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                /** @type {?} */\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                /** @type {?} */\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        }));\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    connect() { return this._renderData; }\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    disconnect() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTableModule, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, MatTable, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource, MatTextColumn };\n//# sourceMappingURL=table.js.map\n"],"sourceRoot":"webpack:///","file":"default~contacts-contacts-module~dashboards-project-project-module~e-commerce-e-commerce-module~file~187b8a15-es5.js"}