{"version":3,"sources":["node_modules/@angular/material/esm2015/chips.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE, END, HOME, hasModifierKey, TAB, ENTER } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, InjectionToken, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Self, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MAT_RIPPLE_GLOBAL_OPTIONS, mixinColor, mixinDisabled, mixinDisableRipple, RippleRenderer, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { take, startWith, takeUntil } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nclass MatChipSelectionChange {\n    /**\n     * @param {?} source\n     * @param {?} selected\n     * @param {?=} isUserInput\n     */\n    constructor(source, selected, isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n// Boilerplate for applying mixins to MatChip.\n/**\n * \\@docs-private\n */\nclass MatChipBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' }\n            },] },\n];\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' }\n            },] },\n];\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} platform\n     * @param {?} globalRippleOptions\n     * @param {?=} animationMode\n     */\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, \n    // @breaking-change 8.0.0 `animationMode` parameter to become required.\n    animationMode) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /**\n         * Whether the chip has focus.\n         */\n        this._hasFocus = false;\n        /**\n         * Whether the chip list is selectable\n         */\n        this.chipListSelectable = true;\n        /**\n         * Whether the chip list is in multi-selection mode.\n         */\n        this._chipListMultiple = false;\n        this._selected = false;\n        this._selectable = true;\n        this._removable = true;\n        /**\n         * Emits when the chip is focused.\n         */\n        this._onFocus = new Subject();\n        /**\n         * Emits when the chip is blured.\n         */\n        this._onBlur = new Subject();\n        /**\n         * Emitted when the chip is selected or deselected.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Emitted when the chip is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emitted when a chip is to be removed.\n         */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * \\@docs-private\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        /** @type {?} */\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n    get value() {\n        return this._value != undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n    get removable() { return this._removable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    /**\n     * @return {?}\n     */\n    _addHostClassName() {\n        /** @type {?} */\n        const basicChipAttrName = 'mat-basic-chip';\n        /** @type {?} */\n        const element = (/** @type {?} */ (this._elementRef.nativeElement));\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n        }\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /**\n     * Handles click events on the chip.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            }));\n        }));\n    }\n    /**\n     * @private\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disabled', 'disableRipple'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip',\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                },\n            },] },\n];\n/** @nocollapse */\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MatChipAvatar, { static: false },] }],\n    trailingIcon: [{ type: ContentChild, args: [MatChipTrailingIcon, { static: false },] }],\n    removeIcon: [{ type: ContentChild, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatChipRemove)), { static: false },] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    /**\n     * @param {?} _parentChip\n     */\n    constructor(_parentChip) {\n        this._parentChip = _parentChip;\n    }\n    /**\n     * Calls the parent chip's public `remove()` method if applicable.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        /** @type {?} */\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.decorators = [\n    { type: Directive, args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)',\n                }\n            },] },\n];\n/** @nocollapse */\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for the chips module.\n * @type {?}\n */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatChipList.\n/**\n * \\@docs-private\n */\nclass MatChipListBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nclass MatChipListChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Uid of the chip list\n         */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /**\n         * Tab index for the chip list.\n         */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /**\n         * Function when touched\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Function when changed\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._multiple = false;\n        this._compareWith = (/**\n         * @param {?} o1\n         * @param {?} o2\n         * @return {?}\n         */\n        (o1, o2) => o1 === o2);\n        this._required = false;\n        this._disabled = false;\n        /**\n         * Orientation of the chip list.\n         */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /**\n         * Event emitted when the selected chip list value has been changed by the user.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * The array of selected chips inside chip list.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n    get role() { return this.empty ? null : 'listbox'; }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n    get selectable() { return this._selectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.chipListSelectable = this._selectable));\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.selectionChange)));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n    get chipFocusChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onFocus)));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n    get chipBlurChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onBlur)));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.destroyed)));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} dir\n             * @return {?}\n             */\n            dir => this._keyManager.withHorizontalOrientation(dir)));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._allowFocusEscape();\n        }));\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._syncChipsState();\n                }));\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @return {?}\n     */\n    focus() {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @return {?}\n     */\n    _focusInput() {\n        if (this._chipInput) {\n            this._chipInput.focus();\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            if (event.keyCode === HOME) {\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n            }\n            else if (event.keyCode === END) {\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @protected\n     * @return {?}\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     * @protected\n     * @return {?}\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                /** @type {?} */\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            /** @type {?} */\n            let input = (/** @type {?} */ (element));\n            return !input.value;\n        }\n        return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.deselect()));\n        if (Array.isArray(value)) {\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            currentValue => this._selectValue(currentValue, isUserInput)));\n            this._sortValues();\n        }\n        else {\n            /** @type {?} */\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @private\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        /** @type {?} */\n        const correspondingChip = this.chips.find((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        }));\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        }));\n    }\n    /**\n     * Deselects every chip in the list.\n     * @private\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        }));\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            }));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.value));\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                }));\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     * @return {?}\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach((/**\n                 * @param {?} chip\n                 * @return {?}\n                 */\n                chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                }));\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        }));\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItemIndex(chipIndex);\n            }\n            this.stateChanges.next();\n        }));\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._blur();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            const chip = event.chip;\n            /** @type {?} */\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        }));\n    }\n    /**\n     * Checks whether an event comes from inside a chip element.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _originatesFromChip(event) {\n        /** @type {?} */\n        let currentElement = (/** @type {?} */ (event.target));\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /**\n     * Checks whether any of the chips is focused.\n     * @private\n     * @return {?}\n     */\n    _hasFocusedChip() {\n        return this.chips.some((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._hasFocus));\n    }\n    /**\n     * Syncs the list's state with the individual chips.\n     * @private\n     * @return {?}\n     */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                chip.disabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            }));\n        }\n    }\n}\nMatChipList.decorators = [\n    { type: Component, args: [{selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid',\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}@media (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids.\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * Whether the control is focused.\n         */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /**\n         * Emitted when a chip is to be added.\n         */\n        this.chipEnd = new EventEmitter();\n        /**\n         * The input's placeholder text.\n         */\n        this.placeholder = '';\n        /**\n         * Unique id for the input.\n         */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    /**\n     * Register input for chip list\n     * @param {?} value\n     * @return {?}\n     */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n    get empty() { return !this._inputElement.value; }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n    _keydown(event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @return {?}\n     */\n    focus() {\n        this._inputElement.focus();\n    }\n    /**\n     * Checks whether a keycode is one of the configured separators.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _isSeparatorKey(event) {\n        if (hasModifierKey(event)) {\n            return false;\n        }\n        /** @type {?} */\n        const separators = this.separatorKeyCodes;\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\nMatChipInput.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                }\n            },] },\n];\n/** @nocollapse */\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = ({\n    separatorKeyCodes: [ENTER]\n});\nclass MatChipsModule {\n}\nMatChipsModule.decorators = [\n    { type: NgModule, args: [{\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: (/** @type {?} */ (ɵ0))\n                    }\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatChipsModule, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS };\n//# sourceMappingURL=chips.js.map\n"],"sourceRoot":"webpack:///","file":"default~e-commerce-e-commerce-module~main-angular-material-elements-angular-material-elements-module~c3af8709-es5.js"}